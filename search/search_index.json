{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"About the project","text":"<p>The core of the OSR Console project is <code>osrlib</code>, a Python library intended for use as the game engine for a turn-based dungeon crawler RPG. There's also a text user interface (TUI) app that runs in the terminal, <code>osrgame</code>, that's useful for demoing and testing the library.</p> <p>Development is currently focused on integrating core game systems into <code>osrlib</code>.</p>"},{"location":"#osrlib","title":"osrlib","text":"<ul> <li>README.md</li> <li>Source code</li> <li>API reference</li> </ul>"},{"location":"#osrgame","title":"osrgame","text":"<p>The osrgame package is a prototype-grade console application based on the Textual TUI framework. It mostly serves as a test bed for <code>osrlib</code> functionality.</p> <p></p> <p></p>"},{"location":"#tests","title":"tests","text":"<p>The tests package houses the Pytest-based unit and integration tests for <code>osrlib</code>.</p>"},{"location":"osrgame/","title":"osrgame","text":"<p>The <code>osrgame</code> package provides the user interface for the OSR Console application--it's the thing you run to play the game.</p>"},{"location":"osrgame/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.11+</li> <li>Poetry 1.6+</li> </ul>"},{"location":"osrgame/#installation","title":"Installation","text":"<p>Install the application's dependencies and its virtual environment by using Poetry. This command will create a Python virtual environment and install <code>osrlib</code> and other dependencies for you.</p> <pre><code># Run from within the &lt;repo-root&gt;/osrgame directory\npoetry install\n</code></pre>"},{"location":"osrgame/#usage","title":"Usage","text":"<p>Launch the OSR Console game application by using Poetry:</p> <pre><code># Run from within the &lt;repo-root&gt;/osrgame directory (same dir as install command)\npoetry run python ./osrgame/osrgame.py\n</code></pre> <p>By starting the game with <code>poetry run</code>, you don't have to worry about manually entering a virtual environment because Poetry handles it for you.</p>"},{"location":"osrlib/","title":"osrlib","text":"<p>The <code>osrlib</code> package is the main rules and game engine library for OSR Console.</p> <p>Documentation | API reference | Source code</p>"},{"location":"osrlib/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.11+</li> <li>Poetry 1.6+</li> <li>OpenAI API key</li> </ul>"},{"location":"osrlib/#installation","title":"Installation","text":"<p>Use Poetry to create a Python virtual environment and install <code>osrlib</code> and its dependencies:</p> <pre><code># Create osrlib project venv and install its deps with Poetry\n# Run this from within the REPO_ROOT/osrlib/ directory.\npoetry install\n</code></pre> <p>To install and run a demo application that uses <code>osrlib</code>, see osrgame: Textual TUI backed by osrlib.</p>"},{"location":"osrlib/#build-the-package","title":"Build the package","text":"<p>You can also build the <code>osrlib</code> package by using Poetry:</p> <pre><code># Build the 'osrlib' Python package\npoetry build\n</code></pre>"},{"location":"osrlib/#test-the-library","title":"Test the library","text":"<p>As with installing dependencies and building the library, you use Poetry to test it.</p>"},{"location":"osrlib/#run-all-the-tests","title":"Run all the tests","text":"<p>To run all unit and integration tests, run <code>pytest</code> with <code>poetry run</code>, passing the test directory path as the only argument:</p> <pre><code># Run ALL unit and integration tests in &lt;repo-root&gt;/tests/*.py\npoetry run pytest ../tests\n</code></pre> <p>You should see a bunch of test output ending in a summary of the test results. Here's an abridged example of test output:</p> <pre><code>$ poetry run pytest ../tests\n========================================================================= test session starts ==========================================================================\nplatform darwin -- Python 3.11.6, pytest-7.4.2, pluggy-1.3.0\nrootdir: /Users/username/repos/osr-console/tests\nconfigfile: pytest.ini\ncollecting ...\n------------------------------------------------------------------------- live log collection --------------------------------------------------------------------------\n2023-10-15 19:10:19 [INFO] Initializing the GameManager...\n2023-10-15 19:10:19 [INFO] GameManager initialized. There are 0 adventures available.\n2023-10-15 19:10:19 [INFO] Testing dice_roller.py\ncollected 196 items\n\n../tests/test_integration_saveload.py::test_abilities_saveload\n---------------------------------------------------------------------------- live log setup ----------------------------------------------------------------------------\n2023-10-15 19:10:19 [INFO] Creating TinyDB @ /Users/username/repos/osr-console/osrlib/test_db.json\n2023-10-15 19:10:19 [INFO] Created TinyDB: &lt;TinyDB tables=[], tables_count=0, default_table_documents_count=0, all_tables_documents_count=[]&gt;\nPASSED                                                                                                                                                           [  0%]\n-------------------------------------------------------------------------- live log teardown ---------------------------------------------------------------------------\n2023-10-15 19:10:19 [INFO] Dropping tables from TinyDB: &lt;TinyDB tables=['abilities'], tables_count=1, default_table_documents_count=0, all_tables_documents_count=['abilities=6']&gt;\n2023-10-15 19:10:19 [INFO] Closing TinyDB: &lt;TinyDB tables=[], tables_count=0, default_table_documents_count=0, all_tables_documents_count=[]&gt;\n\n../tests/test_integration_saveload.py::test_item_saveload\n\n## MANY MORE LINES OF TEST OUTPUT OMITTED ##\n\n../tests/test_unit_party.py::test_clear_party\n---------------------------------------------------------------------------- live log call -----------------------------------------------------------------------------\n2023-10-15 19:10:19 [INFO] Adding 'Sckricko' to party 'The B-Team'...\n2023-10-15 19:10:19 [INFO] Setting 'Sckricko' as the active character in party 'The B-Team'...\n2023-10-15 19:10:19 [INFO] Set 'Sckricko' as the active character in the party.\n2023-10-15 19:10:19 [INFO] Adding 'Mazpar' to party 'The B-Team'...\n2023-10-15 19:10:19 [INFO] Setting 'Mazpar' as the active character in party 'The B-Team'...\n2023-10-15 19:10:19 [INFO] Set 'Mazpar' as the active character in the party.\n2023-10-15 19:10:19 [INFO] Adding 'Slick' to party 'The B-Team'...\n2023-10-15 19:10:19 [INFO] Setting 'Slick' as the active character in party 'The B-Team'...\n2023-10-15 19:10:19 [INFO] Set 'Slick' as the active character in the party.\nPASSED                                                                                                                                                           [ 99%]\n../tests/test_unit_utils.py::test_format_modifiers\n---------------------------------------------------------------------------- live log call -----------------------------------------------------------------------------\n2023-10-15 19:10:19 [INFO] Testing empty modifiers: ''\n2023-10-15 19:10:19 [INFO] Testing single modifier with positive value: 'To hit: +1'\n2023-10-15 19:10:19 [INFO] Testing single modifier with negative value: 'Damage: -1'\n2023-10-15 19:10:19 [INFO] Testing single modifier with no (zero) value: 'Open doors: 0'\n2023-10-15 19:10:19 [INFO] Testing multiple modifiers with positive and negative values: 'To hit: +1, Damage: -1, Open doors: 0'\nPASSED                                                                                                                                                           [100%]\n\n========================================================================= 196 passed in 0.13s ==========================================================================\n</code></pre>"},{"location":"osrlib/#run-specific-tests","title":"Run specific tests","text":"<p>You can pass any argument you normally would to <code>pytest</code> when you run it with Poetry. For example, to run only tests related to removing characters from a party, pass <code>test_remove_character</code> as an arg to the <code>-k</code> filtering option:</p> <pre><code>$ poetry run pytest ../tests -k \"test_remove_character\"\n======================================================= test session starts ========================================================\nplatform darwin -- Python 3.11.6, pytest-7.4.2, pluggy-1.3.0\nrootdir: /Users/username/repos/osr-console/tests\nconfigfile: pytest.ini\ncollecting ...\n------------------------------------------------------- live log collection --------------------------------------------------------\n2023-10-15 19:17:14 [INFO] Initializing the GameManager...\n2023-10-15 19:17:14 [INFO] GameManager initialized. There are 0 adventures available.\n2023-10-15 19:17:14 [INFO] Testing dice_roller.py\ncollected 196 items / 194 deselected / 2 selected\n\n../tests/test_unit_party.py::test_remove_character\n---------------------------------------------------------- live log call -----------------------------------------------------------\n2023-10-15 19:17:14 [INFO] Adding 'Sckricko' to party 'The B-Team'...\n2023-10-15 19:17:14 [INFO] Setting 'Sckricko' as the active character in party 'The B-Team'...\n2023-10-15 19:17:14 [INFO] Set 'Sckricko' as the active character in the party.\nPASSED                                                                                                                       [ 50%]\n../tests/test_unit_party.py::test_remove_character_not_in_party PASSED                                                       [100%]\n\n================================================ 2 passed, 194 deselected in 0.03s =================================================\n</code></pre>"},{"location":"tests/","title":"tests","text":"<p>This project houses the unit and integration tests for the <code>osrlib</code> package. In the future, it might also house similar tests for <code>osrgame</code>.</p>"},{"location":"tests/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.11+</li> <li>Poetry 1.6+</li> </ul>"},{"location":"tests/#installation","title":"Installation","text":"<p>Use Poetry to create a Python virtual environment and install <code>osrlib</code> and its dependencies:</p> <pre><code># Create osrlib project venv and install its deps with Poetry\npoetry install\n</code></pre>"},{"location":"tests/#update-dependencies","title":"Update dependencies","text":"<p>Any time you make code changes to <code>osrlib</code>, you need to update this <code>tests</code> project to use the latest <code>osrlib</code> code before you run the unit and integration tests defined here.</p> <p>The process goes like this:</p> <ol> <li>Make your code change in <code>osrlib</code>.</li> <li> <p>Bump <code>osrlib</code>'s package version in its <code>pyproject.toml</code> file.</p> <p>The version string to bump is in the <code>[tool.poetry]</code> section:</p> <pre><code>[tool.poetry]\nname = \"osrlib\"\nversion = \"0.1.3\"\n</code></pre> </li> <li> <p>Update this project with the latest <code>osrlib</code> package version (and your code changes) by running <code>poetry udpate</code> from within the <code>tests/</code> directory--the same directory as this <code>README.md</code> file:</p> <pre><code>$ poetry update\nUpdating dependencies\nResolving dependencies... (0.2s)\n\nPackage operations: 0 installs, 1 update, 0 removals\n\n\u2022 Updating osrlib (0.1.2 /Users/username/repos/osr-console/osrlib -&gt; 0.1.3 /Users/username/repos/osr-console/osrlib)\n\nWriting lock file\n</code></pre> </li> </ol>"},{"location":"tests/#run-all-the-tests","title":"Run all the tests","text":"<p>To run all unit and integration tests, run <code>pytest</code> with <code>poetry run</code>:</p> <pre><code># Run ALL unit and integration tests in this project - run from within this tests/ directory\npoetry run pytest\n</code></pre> <p>You should see a bunch of test output ending in a summary of the test results. Here's an abridged example of test output:</p> <pre><code>$ poetry run pytest\n============================= test session starts ==============================\nplatform darwin -- Python 3.11.6, pytest-7.4.2, pluggy-1.3.0\nrootdir: /Users/mmacy/repos/osr-console/tests\nconfigfile: pytest.ini\n\n----------------------------- live log collection ------------------------------\n2023-10-18 20:13:56 [INFO] Initializing the GameManager...\n2023-10-18 20:13:56 [INFO] GameManager initialized. There are 0 adventures available.\n2023-10-18 20:13:56 [INFO] Testing dice_roller.py\ncollected 213 items\n\n...\n\ntest_unit_utils.py::test_format_modifiers\n-------------------------------- live log call ---------------------------------\n2023-10-18 20:14:01 [INFO] Testing empty modifiers: ''\n2023-10-18 20:14:01 [INFO] Testing single modifier with positive value: 'To hit: +1'\n2023-10-18 20:14:01 [INFO] Testing single modifier with negative value: 'Damage: -1'\n2023-10-18 20:14:01 [INFO] Testing single modifier with no (zero) value: 'Open doors: 0'\n2023-10-18 20:14:01 [INFO] Testing multiple modifiers with positive and negative values: 'To hit: +1, Damage: -1, Open doors: 0'\nPASSED                                                                   [100%]\n\n============================= 213 passed in 0.12s ==============================\n</code></pre>"},{"location":"tests/#run-certain-tests","title":"Run certain tests","text":"<p>You can pass any argument you normally would to <code>pytest</code> when you run it with Poetry.</p> <p>For example, to run only the test that adds the first character to a party, pass <code>test_add_firstcharacter</code> as an arg to the <code>-k</code> filtering option:</p> <pre><code>$ poetry run pytest -k test_add_firstcharacter\n============================================ test session starts =============================================\nplatform darwin -- Python 3.11.6, pytest-7.4.2, pluggy-1.3.0\nrootdir: /Users/mmacy/repos/osr-console/tests\nconfigfile: pytest.ini\ncollecting ...\n-------------------------------------------- live log collection ---------------------------------------------\n2023-10-19 04:54:56 [INFO] Initializing the GameManager...\n2023-10-19 04:54:56 [INFO] GameManager initialized. There are 0 adventures available.\n2023-10-19 04:54:56 [INFO] Testing dice_roller.py\ncollected 213 items / 212 deselected / 1 selected\n\ntest_unit_party.py::test_add_firstcharacter\n----------------------------------------------- live log call ------------------------------------------------\n2023-10-19 04:54:56 [INFO] Adding 'Sckricko' to party 'The B-Team'...\n2023-10-19 04:54:56 [INFO] Setting 'Sckricko' as the active character in party 'The B-Team'...\n2023-10-19 04:54:56 [INFO] Set 'Sckricko' as the active character in the party.\nPASSED                                                                                                 [100%]\n\n===================================== 1 passed, 212 deselected in 0.03s ======================================\n</code></pre>"},{"location":"reference/","title":"osrlib API","text":"<p>Python API reference for the modules in the osrlib package.</p>"},{"location":"reference/ability/","title":"ability","text":""},{"location":"reference/ability/#osrlib.ability","title":"ability","text":"<p>Defines <code>PlayerCharacter</code> abilities and their modifiers.</p> <p>An Ability is an inherent trait possessed by every PlayerCharacter. There are several ability types, each of which can provide modifiers (bonuses or penalties) that affect gameplay mechanics like dice rolls or other properties of the character. For example, a high Dexterity score can make the character harder to hit in combat due to an AC modifier, and the character might know an additional language or two because they also have a high Intelligence score.</p>"},{"location":"reference/ability/#osrlib.ability--usage","title":"Usage:","text":"<p>You typically wouldn't create an instance of an Ability directly. Instead, you create an instance of PlayerCharacter, and its abilities are instantiated as attributes of the <code>PlayerCharacter</code> instance automatically. You can then \"roll\" the character's ability scores by calling a method on <code>PlayerCharacter</code>.</p> <pre><code>from osrlib.enums import CharacterClassType\nfrom osrlib.player_character import PlayerCharacter\n\ndef test_doc_player_character_create():\n\n    # Create a fighter PC and roll their abilities and hit points (HP)\n    fighter_pc = PlayerCharacter(\"Sckricko\", CharacterClassType.FIGHTER)\n    fighter_pc.roll_abilities()\n    fighter_pc.roll_hp()\n</code></pre>"},{"location":"reference/ability/#osrlib.ability.Ability","title":"Ability","text":"<pre><code>Ability(score: int)\n</code></pre> <p>               Bases: <code>ABC</code></p> <p>Abstract base class for character abilities.</p> <p>Attributes:</p> <ul> <li> <code>score</code>               (<code>int</code>)           \u2013            <p>The raw ability score.</p> </li> <li> <code>modifiers</code>               (<code>dict</code>)           \u2013            <p>A mapping of the ability's modifier types to modifier values based on the ability score.</p> </li> </ul> <p>Parameters:</p> <ul> <li> <code>score</code>               (<code>int</code>)           \u2013            <p>The raw ability score.</p> </li> </ul>"},{"location":"reference/ability/#osrlib.ability.Ability.from_dict","title":"from_dict  <code>classmethod</code>","text":"<pre><code>from_dict(data: dict) -&gt; Ability\n</code></pre> <p>Create an ability instance from a dictionary.</p> <p>Useful for deserializing the ability's data during a game load operation.</p> <p>Parameters:</p> <ul> <li> <code>data</code>               (<code>dict</code>)           \u2013            <p>Dictionary containing the ability's type and score.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Ability</code> (              <code>Ability</code> )          \u2013            <p>Instance of the Ability class or its subclasses.</p> </li> </ul>"},{"location":"reference/ability/#osrlib.ability.Ability.get_earned_xp_adjustment","title":"get_earned_xp_adjustment","text":"<pre><code>get_earned_xp_adjustment() -&gt; float\n</code></pre> <p>Calculate the experience points adjustment based on the ability score.</p> <p>Determines the percentage adjustment to experience points earned, based on the character's ability score. This adjustment can be positive or negative depending on the score.</p> <p>Returns:</p> <ul> <li> <code>float</code> (              <code>float</code> )          \u2013            <p>The experience point adjustment as a decimal percentage.</p> </li> </ul>"},{"location":"reference/ability/#osrlib.ability.Ability.to_dict","title":"to_dict","text":"<pre><code>to_dict() -&gt; dict\n</code></pre> <p>Convert ability instance to a dictionary for serialization.</p> <p>Useful for serializing and transferring the ability's data during a game save operation.</p> <p>Returns:</p> <ul> <li> <code>dict</code> (              <code>dict</code> )          \u2013            <p>Dictionary containing the ability's type and score.</p> </li> </ul>"},{"location":"reference/ability/#osrlib.ability.Charisma","title":"Charisma","text":"<pre><code>Charisma(score: int)\n</code></pre> <p>               Bases: <code>Ability</code></p> <p>Represents the Charisma ability for characters.</p> <p>Charisma measures force of personality, leadership ability, and physical attractiveness.</p> <p>Modifiers: - REACTION (ModifierType.REACTION): Modifies reaction rolls when interacting with NPCs.</p> <p>Parameters:</p> <ul> <li> <code>score</code>               (<code>int</code>)           \u2013            <p>The raw ability score.</p> </li> </ul>"},{"location":"reference/ability/#osrlib.ability.Constitution","title":"Constitution","text":"<pre><code>Constitution(score: int)\n</code></pre> <p>               Bases: <code>Ability</code></p> <p>Represents the Constitution ability for characters.</p> <p>Constitution measures stamina, endurance, and overall health.</p> <p>Modifiers:</p> <ul> <li>HP (ModifierType.HP): Modifies hit point (HP) rolls. For example, when initially rolling the character or when the                         character gains a level.</li> </ul> <p>Parameters:</p> <ul> <li> <code>score</code>               (<code>int</code>)           \u2013            <p>The raw ability score.</p> </li> </ul>"},{"location":"reference/ability/#osrlib.ability.Dexterity","title":"Dexterity","text":"<pre><code>Dexterity(score: int)\n</code></pre> <p>               Bases: <code>Ability</code></p> <p>Represents the Dexterity ability for characters.</p> <p>Dexterity measures agility, reflexes, and coordination.</p> <p>Modifiers:</p> <ul> <li>TO_HIT (ModifierType.TO_HIT): Modifies ranged attack rolls.</li> <li>AC (ModifierType.AC): Modifies armor class (lower is better).</li> <li>INITIATIVE (ModifierType.INITIATIVE): Modifies initiative rolls.</li> </ul> <p>Parameters:</p> <ul> <li> <code>score</code>               (<code>int</code>)           \u2013            <p>The raw ability score.</p> </li> </ul>"},{"location":"reference/ability/#osrlib.ability.Intelligence","title":"Intelligence","text":"<pre><code>Intelligence(score: int)\n</code></pre> <p>               Bases: <code>Ability</code></p> <p>Represents the Intelligence ability for characters.</p> <p>Intelligence is a measure of problem-solving ability, linguistic capability, and magical aptitude.</p> <p>Modifiers: - LANGUAGES (ModifierType.LANGUAGES): Modifies the number of additional languages the character can read and write.</p> <p>Parameters:</p> <ul> <li> <code>score</code>               (<code>int</code>)           \u2013            <p>The raw ability score.</p> </li> </ul>"},{"location":"reference/ability/#osrlib.ability.Strength","title":"Strength","text":"<pre><code>Strength(score: int)\n</code></pre> <p>               Bases: <code>Ability</code></p> <p>Represents the Strength ability for characters.</p> <p>Strength measures muscle power and the ability to use that power. It primarily influences hand-to-hand combat and opening doors.</p> <p>Modifiers:</p> <ul> <li>TO_HIT (<code>ModifierType.TO_HIT</code>): Modifies melee (hand-to-hand) attack rolls.</li> <li>DAMAGE (<code>ModifierType.DAMAGE</code>): Modifies damage in melee combat.</li> <li>OPEN_DOORS (<code>ModifierType.OPEN_DOORS</code>): Modifies chances of opening stuck doors.</li> </ul> <p>Parameters:</p> <ul> <li> <code>score</code>               (<code>int</code>)           \u2013            <p>The raw ability score.</p> </li> </ul>"},{"location":"reference/ability/#osrlib.ability.Wisdom","title":"Wisdom","text":"<pre><code>Wisdom(score: int)\n</code></pre> <p>               Bases: <code>Ability</code></p> <p>Represents the Wisdom ability for characters.</p> <p>Wisdom measures a character's common sense, intuition, and willpower.</p> <p>Modifiers: - SAVING_THROWS (ModifierType.SAVING_THROWS): Modifies saving throws against spells and magical effects.</p> <p>Parameters:</p> <ul> <li> <code>score</code>               (<code>int</code>)           \u2013            <p>The raw ability score.</p> </li> </ul>"},{"location":"reference/adventure/","title":"adventure","text":""},{"location":"reference/adventure/#osrlib.adventure","title":"adventure","text":"<p>The <code>adventure</code> module provides the Adventure class, which represents a scenario to be played through by the adventuring Party.</p> <p>The <code>Adventure</code> class is intended to encapsulate a set of thematically related dungeons and quests the player's <code>Party</code> can explore and complete. It's the thing a game game designer would typically present as a cohesive story or portion of a story for the player to experience.</p> <p>Classes:</p> <ul> <li> <code>Adventure</code>           \u2013            <p>Manages the <code>Dungeon</code> and <code>Quest</code> collections in a game scenario and the progress of the player's <code>Party</code> through the scenario.</p> </li> <li> <code>DungeonNotFoundError</code>           \u2013            <p>Raised for missing dungeons.</p> </li> <li> <code>DungeonAlreadyExistsError</code>           \u2013            <p>Raised for duplicate dungeon additions.</p> </li> </ul>"},{"location":"reference/adventure/#osrlib.adventure.Adventure","title":"Adventure","text":"<pre><code>Adventure(name: str, description: str = '', introduction: str = '', dungeons: list = [], quests: list = [])\n</code></pre> <p>An <code>Adventure</code> has a collection of dungeons that can be played through and quests that can be completed by a party of characters.</p> <p>To start an adventure, add a <code>Party</code> to the adventure with <code>set_active_party</code> and then call <code>start_adventure</code>. Once you've started an adventure, you can't add or remove the party or its characters until you call <code>end_adventure</code> or all the characters in the party have been killed.</p> <p>Only one party can play through (be added to) an adventure at a time.</p> <p>Attributes:</p> <ul> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>The name of the adventure.</p> </li> <li> <code>short_description</code>               (<code>str</code>)           \u2013            <p>A short description of the adventure.</p> </li> <li> <code>introduction</code>               (<code>str</code>)           \u2013            <p>A longer introduction in the form typically found in the beginning of a module.</p> </li> <li> <code>dungeons</code>               (<code>list</code>)           \u2013            <p>A list of the dungeons in the adventure.</p> </li> <li> <code>quests</code>               (<code>list</code>)           \u2013            <p>A list of the quests in the adventure.</p> </li> <li> <code>party</code>               (<code>Party</code>)           \u2013            <p>The party playing through the adventure.</p> </li> </ul>"},{"location":"reference/adventure/#osrlib.adventure.Adventure.add_dungeon","title":"add_dungeon","text":"<pre><code>add_dungeon(dungeon: Dungeon)\n</code></pre> <p>Add a dungeon to the adventure.</p> <p>Parameters:</p> <ul> <li> <code>dungeon</code>               (<code>Dungeon</code>)           \u2013            <p>The dungeon to add to the adventure.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>DungeonAlreadyExistsError</code>             \u2013            <p>If the dungeon already exists in the adventure.</p> </li> </ul>"},{"location":"reference/adventure/#osrlib.adventure.Adventure.end_adventure","title":"end_adventure","text":"<pre><code>end_adventure()\n</code></pre> <p>End the adventure.</p> <p>Call this method when the adventure is over.</p>"},{"location":"reference/adventure/#osrlib.adventure.Adventure.load_adventure","title":"load_adventure  <code>staticmethod</code>","text":"<pre><code>load_adventure(file_path: str = None) -&gt; Adventure\n</code></pre> <p>Loads the adventure from a JSON file.</p> <p>Parameters:</p> <ul> <li> <code>file_path</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>The path of the file to load the adventure from.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Adventure</code> (              <code>Adventure</code> )          \u2013            <p>An instance of the Adventure class loaded from the file.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>FileNotFoundError</code>             \u2013            <p>If the specified file does not exist.</p> </li> <li> <code>PermissionError</code>             \u2013            <p>If there are issues with file access permissions.</p> </li> <li> <code>JSONDecodeError</code>             \u2013            <p>If the file content is not valid JSON.</p> </li> <li> <code>Exception</code>             \u2013            <p>For any other issues that may occur.</p> </li> </ul>"},{"location":"reference/adventure/#osrlib.adventure.Adventure.save_adventure","title":"save_adventure","text":"<pre><code>save_adventure(file_path: str = None) -&gt; str\n</code></pre> <p>Saves the adventure to a JSON file.</p> <p>Parameters:</p> <ul> <li> <code>file_path</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>The path where the file will be saved.                        If None, saves in the default data directory.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code> (              <code>str</code> )          \u2013            <p>The path where the file was saved.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>OSError</code>             \u2013            <p>If the file cannot be written.</p> </li> </ul>"},{"location":"reference/adventure/#osrlib.adventure.Adventure.set_active_dungeon","title":"set_active_dungeon","text":"<pre><code>set_active_dungeon(dungeon: Dungeon)\n</code></pre> <p>Set the active dungeon for the adventure.</p> <p>The active dungeon is the dungeon that the party is currently exploring.</p> <p>Parameters:</p> <ul> <li> <code>dungeon</code>               (<code>Dungeon</code>)           \u2013            <p>The dungeon to set as active.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>DungeonNotFoundError</code>             \u2013            <p>If the dungeon isn't in the adventure.</p> </li> </ul>"},{"location":"reference/adventure/#osrlib.adventure.Adventure.set_active_party","title":"set_active_party","text":"<pre><code>set_active_party(party)\n</code></pre> <p>Set the party of player characters that will play through the adventure.</p> <p>Parameters:</p> <ul> <li> <code>party</code>               (<code>Party</code>)           \u2013            <p>The adventuring party for the adventure.</p> </li> </ul>"},{"location":"reference/adventure/#osrlib.adventure.Adventure.start_adventure","title":"start_adventure","text":"<pre><code>start_adventure()\n</code></pre> <p>Start the adventure.</p> <p>Call this method only after you've added a party to the adventure and set the active dungeon.</p>"},{"location":"reference/adventure/#osrlib.adventure.Adventure.to_dict","title":"to_dict","text":"<pre><code>to_dict() -&gt; dict\n</code></pre> <p>Convert the adventure to a dict.</p> <p>Returns:</p> <ul> <li> <code>dict</code> (              <code>dict</code> )          \u2013            <p>A dict representation of the adventure.</p> </li> </ul>"},{"location":"reference/adventure/#osrlib.adventure.DungeonAlreadyExistsError","title":"DungeonAlreadyExistsError","text":"<p>               Bases: <code>Exception</code></p> <p>Exception raised when a given dungeon already exists in the adventure's list of dungeons.</p>"},{"location":"reference/adventure/#osrlib.adventure.DungeonNotFoundError","title":"DungeonNotFoundError","text":"<p>               Bases: <code>Exception</code></p> <p>Exception raised when a given dungeon isn't in the adventure's list of dungeons.</p>"},{"location":"reference/character_classes/","title":"character_classes","text":""},{"location":"reference/character_classes/#osrlib.character_classes","title":"character_classes","text":"<p>Defines character classes for player characters.</p>"},{"location":"reference/character_classes/#osrlib.character_classes.CharacterClass","title":"CharacterClass","text":"<pre><code>CharacterClass(character_class_type: CharacterClassType, level: int = 1, constitution_modifier: int = 0)\n</code></pre> <p>Defines a character class for a player character.</p> <p>Attributes:</p> <ul> <li> <code>class_type</code>               (<code>CharacterClassType</code>)           \u2013            <p>The type of the character class.</p> </li> <li> <code>saving_throws</code>               (<code>List[int]</code>)           \u2013            <p>The saving throw values.</p> </li> <li> <code>levels</code>               (<code>List[ClassLevel]</code>)           \u2013            <p>The class levels.</p> </li> <li> <code>current_level</code>               (<code>ClassLevel</code>)           \u2013            <p>The current level of the character.</p> </li> <li> <code>hit_die</code>               (<code>str</code>)           \u2013            <p>The hit die for the character class.</p> </li> <li> <code>hp</code>               (<code>int</code>)           \u2013            <p>The current hit points.</p> </li> <li> <code>xp</code>               (<code>int</code>)           \u2013            <p>The current experience points.</p> </li> </ul>"},{"location":"reference/character_classes/#osrlib.character_classes.CharacterClass.xp_needed_for_next_level","title":"xp_needed_for_next_level  <code>property</code>","text":"<pre><code>xp_needed_for_next_level: int\n</code></pre> <p>Return the XP needed to reach the next level.</p>"},{"location":"reference/character_classes/#osrlib.character_classes.CharacterClass.level_up","title":"level_up","text":"<pre><code>level_up(hp_modifier: int = 0) -&gt; bool\n</code></pre> <p>Level up the character if possible.</p> <p>If the character's current XP meets the next level's requirement, the character's current_level is populated with the next level available for the class. Hit points are rolled using the hit die appropriate for the character's class and are applied to the character's CharacterClass instance.</p> <p>Example:</p> <pre><code>    &gt;&gt;&gt; pc = PlayerCharacter(name=\"Sckricko\", character_class=CharacterClassType.WARRIOR)\n    &gt;&gt;&gt; pc.character_class.xp = 2000  # Manually setting XP to meet level-up criteria\n    &gt;&gt;&gt; hp_modifier = pc.abilities[AbilityTypes.CONSTITUTION].modifiers[ModifierTypes.HP]\n    &gt;&gt;&gt; new_level = pc.character_class.level_up(hp_modifier)\n    &gt;&gt;&gt; new_level.level_num\n    2\n</code></pre> <p>Parameters:</p> <ul> <li> <code>hp_modifier</code>               (<code>int</code>, default:                   <code>0</code> )           \u2013            <p>Hit point bonus or penalty to apply to the HP roll when leveling.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True if the character leveled up, otherwise False.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>             \u2013            <p>Raised if leveling up is not possible due to insufficient XP or maximum level reached.</p> </li> </ul>"},{"location":"reference/character_classes/#osrlib.character_classes.CharacterClass.roll_hp","title":"roll_hp","text":"<pre><code>roll_hp(hp_modifier: int = 0) -&gt; DiceRoll\n</code></pre> <p>Roll hit points for the character.</p> <p>Parameters:</p> <ul> <li> <code>hp_modifier</code>               (<code>int</code>, default:                   <code>0</code> )           \u2013            <p>Bonus or penalty to apply to the hit point roll.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>DiceRoll</code> (              <code>DiceRoll</code> )          \u2013            <p>The dice roll result.</p> </li> </ul>"},{"location":"reference/character_classes/#osrlib.character_classes.ClassLevel","title":"ClassLevel","text":"<pre><code>ClassLevel(level_num: int, title: str, xp_required_for_level: int, hit_dice: str, thac0: int, spell_slots: Union[None, str, List[Tuple[int, int]]] = None)\n</code></pre> <p>Represents a single level in a character class.</p> <p>Attributes:</p> <ul> <li> <code>level_num</code>               (<code>int</code>)           \u2013            <p>The level number.</p> </li> <li> <code>title</code>               (<code>str</code>)           \u2013            <p>The title for the level.</p> </li> <li> <code>required_xp</code>               (<code>int</code>)           \u2013            <p>The XP required to reach this level.</p> </li> <li> <code>hit_dice</code>               (<code>str</code>)           \u2013            <p>The hit dice for this level.</p> </li> <li> <code>spell_slots</code>               (<code>Union[None, str, List[Tuple[int, int]]]</code>)           \u2013            <p>Spell slots available at this level.</p> </li> </ul>"},{"location":"reference/character_classes/#osrlib.character_classes.ClassLevel.get_to_hit_target_ac","title":"get_to_hit_target_ac","text":"<pre><code>get_to_hit_target_ac(target_ac: int)\n</code></pre> <p>Get the to-hit roll required for a character of this class and level to hit a target that has the given AC.</p>"},{"location":"reference/character_classes/#osrlib.character_classes.all_character_classes","title":"all_character_classes  <code>module-attribute</code>","text":"<pre><code>all_character_classes = [CharacterClass(CLERIC), CharacterClass(THIEF), CharacterClass(DWARF), CharacterClass(ELF), CharacterClass(FIGHTER), CharacterClass(HALFLING), CharacterClass(MAGIC_USER), CharacterClass(COMMONER)]\n</code></pre>"},{"location":"reference/character_classes/#osrlib.character_classes.class_levels","title":"class_levels  <code>module-attribute</code>","text":"<pre><code>class_levels = {CLERIC: cleric_levels, DWARF: dwarf_levels, ELF: elf_levels, FIGHTER: fighter_levels, HALFLING: halfling_levels, MAGIC_USER: magic_user_levels, THIEF: thief_levels, COMMONER: commoner_levels}\n</code></pre>"},{"location":"reference/constants/","title":"constants","text":""},{"location":"reference/constants/#osrlib.constants","title":"constants","text":"<p>Constants for random character and dungeon generation.</p>"},{"location":"reference/constants/#osrlib.constants.ADVENTURE_NAMES","title":"ADVENTURE_NAMES  <code>module-attribute</code>","text":"<pre><code>ADVENTURE_NAMES = [\"Ancient Wizard's Riddle\", 'Arcane Shadow', 'Cursed Glade Expedition', 'Depths of Mysticism', 'Echoes of Magic', 'Enigma of Depths', 'Forbidden Arcana', 'Forgotten Crypt Journey', \"Glofarnux's Legacy\", \"Glofarnux's Reckoning\", 'Haunted Forest Trek', 'Hidden Realms', \"Lich's Awakening\", 'Lost Glade Adventure', 'Mystic Forest Quest', 'Mystic Silence', 'Subterranean Secrets', 'Tale of the Mad Mage', 'Twilight of Glofarnux', \"Wizard's Lost Domain\"]\n</code></pre> <p>List of names for use when creating a random Adventure.</p>"},{"location":"reference/constants/#osrlib.constants.DUNGEON_NAMES","title":"DUNGEON_NAMES  <code>module-attribute</code>","text":"<pre><code>DUNGEON_NAMES = [\"Ancient Wizard's Hold\", 'Arcane Underground', 'Cursed Labyrinth', 'Echoing Catacombs', 'Anchored Chambers', 'Fornixium Depths', 'Forbidden Undercroft', 'Forest Heart Dungeon', \"Glofarnux's Bastion\", \"Glofarnux's Chambers\", \"Glofarnux's Tomb\", \"Lich's Hidden Stronghold\", \"Lost Wizard's Domain\", \"Mad Mage's Lair\", 'Mystic Grotto', 'Mystic Hollows', 'Mystic Maze', \"Secluded Wizard's Keep\", 'Shadowed Halls', 'Veiled Sanctum']\n</code></pre> <p>List of names for use when creating a random Dungeon.</p>"},{"location":"reference/constants/#osrlib.constants.CLERIC_NAMES","title":"CLERIC_NAMES  <code>module-attribute</code>","text":"<pre><code>CLERIC_NAMES = ['Aroryc Peceorg', 'Anofpofyo Bryghpfoul', 'Auroro Grocehond', 'Bron Heorphmender', 'Collyfpo Foyphfong', 'Coffyon Downwhyfper', 'Cedryc Sogebleffed', 'Domoryf Spyrypheorp', 'Doryuf Lyfebynder', 'Alyon Lyghpbrynger', 'Arowen Sporheoler', 'Azro Spormcoller', 'Farpyon Soukeeper', 'Gydeon Sunword', 'Godryc Holybrond', 'Ione Truphfeeker', 'Kyro Everlyghp', 'Lucyuf Ironfoyph', 'Lydyo Heorphword', 'Moeve Sporwopcher', 'Myrobel Sporfoll', 'Nyomh Sunfong', 'Orpheuf Moonword', 'Rophoel Ironproyer', 'Roweno Sogeheorp', 'Sekiino Peoceweover', 'Syrof Shodowbone', 'Sylvefper Nyghpyngole', 'Tholyo Moonbleffed', 'Tryfprom Lyghpfhyeld']\n</code></pre>"},{"location":"reference/constants/#osrlib.constants.DWARF_NAMES","title":"DWARF_NAMES  <code>module-attribute</code>","text":"<pre><code>DWARF_NAMES = ['Audhyld Sprongheorp', 'Bolyn Ironhond', 'Boryn Ironfyfp', 'Brom Copperveyn', 'Dognol Spormforge', 'Dorn Heovyhommer', 'Aberk Alefpoup', 'Alfo Axebrewer', 'Forgrym Eorphfhyeld', 'Grepo Sponebreoker', 'Horbek Goldfynder', 'Helgo Shyeldmoyden', 'Hyldo Thunderforge', 'Korbyn Bopplebeord', 'Mogny Sylveroxe', 'Orfyk Fromebeord', 'Runo Mounpoynbroyd', 'Sygrun Rockfeeker', 'Tyldo Ironfoop', 'Ulfgor Frofpbeord']\n</code></pre>"},{"location":"reference/constants/#osrlib.constants.ELF_NAMES","title":"ELF_NAMES  <code>module-attribute</code>","text":"<pre><code>ELF_NAMES = ['Adron Hyghforefp', 'Aeror Goronodel', 'Aronnyf Sporfrower', 'Aryelro Greenleof', 'Coelum Sunorrow', 'Ayrovel Xyrofcyenp', 'Aroro Dufkwoker', 'Arevon Skyhorrow', 'Foeror Sylverfrond', 'Fenryf Sylverfong', 'Golynndon Evenwood', 'Ilphekyyr Serpenpfbone', 'Ifylme Moonfhodow', 'Lyo Moonwhyfper', 'Nuoro Nyghpbreeze', 'Ryveph Melyomne', 'Rolen Ookenfhyeld', 'Soryel Downbrook', 'Thekiin Noyro', 'Yforo Bryghpfpor']\n</code></pre>"},{"location":"reference/constants/#osrlib.constants.FIGHTER_NAMES","title":"FIGHTER_NAMES  <code>module-attribute</code>","text":"<pre><code>FIGHTER_NAMES = ['Alyfpoyr Goldleof', 'Anyo Speelgoze', 'Aryono Swyfporrow', 'Boldryc Spormcoller', 'Brynn Thunderfhyeld', 'Coelum Sylenpbrode', 'Coffyuf Brockphorn', 'Doryuf Skycrod', 'Aroro Moonbrode', 'Aldryc phe Bold', 'Avelyn Downfeeker', 'Fenryr Sunword', 'Goreph Ironfyfp', 'Gwendolyn Wolfheorp', 'Iryf Whyfperwynd', 'Joryn Wyldheorp', 'Koelen Dirkwood', 'Kendryck Fromebeorer', 'Leono Bryghpfhyeld', 'Lyfonder Shodowoker', 'Merek Sponecleover', 'Nodyo Nyghpbreeze', 'Oryon Frofpborne', 'Rowon Spormbrynger', 'Serophyno Sporlyghp', 'Sylvono Sporforge', 'Thone Sylverhelm', 'Tryfpon Runebrode', 'Vorryc Thunderhond', 'Zephyr Ironfoul']\n</code></pre>"},{"location":"reference/constants/#osrlib.constants.HALFLING_NAMES","title":"HALFLING_NAMES  <code>module-attribute</code>","text":"<pre><code>HALFLING_NAMES = ['Belro Burrowf', 'Bylbo Lyghpfoop', 'Bromble Brufhgopher', 'Bungo Thyfplefhonkf', 'Doyfy Hyghhyll', 'Drogo Bromblephorn', 'Afmereldo Bupperchurn', 'Foop Greenbopple', 'Lyly Greenhyll', 'Lobelyo Applebroom', 'Meryodoc Brondybuck', 'Myro Underbough', 'Noroh Knopwyfe', 'Perryn Goodborrel', 'Pyppyn Hyllpopple', 'Prymrofe Sondybonkf', 'Rofye Hordbyfcuyp', 'Ruby Teoleof', 'Somwyfe Foyrfoop', 'Togo Weedwhocker']\n</code></pre>"},{"location":"reference/constants/#osrlib.constants.MAGIC_USER_NAMES","title":"MAGIC_USER_NAMES  <code>module-attribute</code>","text":"<pre><code>MAGIC_USER_NAMES = ['Aroryc Shodowcofper', 'Aryodne Cryfpolgoze', 'Apheno Dreomweover', 'Azryel Sunwhyfper', 'Colyfpo Sporborn', 'Cedryc Spormcoller', 'Cyrce Myfpycmoon', 'Droven Nyghpfeer', 'Amryf Voydwoker', 'Avelyn Moonfynger', 'Goyuf Bryghpwond', 'Ilyono Frofpfyre', 'Ifolde Shodowfpell', 'Luno Spellbynder', 'Lyfondro Sporweover', 'Mognuf Dirkweover', 'Oryon Spellweover', 'Serophyno Fromeheorp', 'Xonder Hyghmoge', 'Zephyruf Lyghpbrynger']\n</code></pre>"},{"location":"reference/constants/#osrlib.constants.THIEF_NAMES","title":"THIEF_NAMES  <code>module-attribute</code>","text":"<pre><code>THIEF_NAMES = ['Aryo Moonmork', 'Brom Slypknop', 'Code Thyfplefhonk', 'Corbyn Brockcrook', 'Dox Whyfperwynd', 'Aroro Sporphyef', 'Aryf Sylenpfpep', 'Fynk Sleyghp', 'Gorrepp Ironmofk', 'Ifro Ghofpfpep', 'Icy Quyckfoop', 'Jofper Nyghprock', 'Lyro Fleepfhodow', 'Lorcon Shodowhond', 'Moro Sofppockep', 'Myro Swyfpfyngerf', 'Neve Shodowmere', 'Nyx Lyghpfynger', 'Rook Greygoze', 'Selyne Dirkwhyfper']\n</code></pre>"},{"location":"reference/constants/#osrlib.constants.ADVENTURE_NAMES","title":"ADVENTURE_NAMES  <code>module-attribute</code>","text":"<pre><code>ADVENTURE_NAMES = [\"Ancient Wizard's Riddle\", 'Arcane Shadow', 'Cursed Glade Expedition', 'Depths of Mysticism', 'Echoes of Magic', 'Enigma of Depths', 'Forbidden Arcana', 'Forgotten Crypt Journey', \"Glofarnux's Legacy\", \"Glofarnux's Reckoning\", 'Haunted Forest Trek', 'Hidden Realms', \"Lich's Awakening\", 'Lost Glade Adventure', 'Mystic Forest Quest', 'Mystic Silence', 'Subterranean Secrets', 'Tale of the Mad Mage', 'Twilight of Glofarnux', \"Wizard's Lost Domain\"]\n</code></pre> <p>List of names for use when creating a random Adventure.</p>"},{"location":"reference/constants/#osrlib.constants.DUNGEON_NAMES","title":"DUNGEON_NAMES  <code>module-attribute</code>","text":"<pre><code>DUNGEON_NAMES = [\"Ancient Wizard's Hold\", 'Arcane Underground', 'Cursed Labyrinth', 'Echoing Catacombs', 'Anchored Chambers', 'Fornixium Depths', 'Forbidden Undercroft', 'Forest Heart Dungeon', \"Glofarnux's Bastion\", \"Glofarnux's Chambers\", \"Glofarnux's Tomb\", \"Lich's Hidden Stronghold\", \"Lost Wizard's Domain\", \"Mad Mage's Lair\", 'Mystic Grotto', 'Mystic Hollows', 'Mystic Maze', \"Secluded Wizard's Keep\", 'Shadowed Halls', 'Veiled Sanctum']\n</code></pre> <p>List of names for use when creating a random Dungeon.</p>"},{"location":"reference/dice_roller/","title":"dice_roller","text":""},{"location":"reference/dice_roller/#osrlib.dice_roller","title":"dice_roller","text":"<p>Dice roller module for rolling dice based on the nDn or Dn notation, supporting modifiers.</p> <p>This module provides functionality for rolling dice using traditional RPG notations such as '3d6' (three six-sided dice) and '1d20+5' (one twenty-sided die plus a modifier of 5). It supports modifiers and the option to drop the lowest roll.</p>"},{"location":"reference/dice_roller/#osrlib.dice_roller.DiceRoll","title":"DiceRoll","text":"<p>               Bases: <code>namedtuple('RollResultBase', ['num_dice', 'num_sides', 'total', 'modifier', 'total_with_modifier', 'rolls'])</code></p> <p>Represent the result of a dice roll.</p> <p>This class is a named tuple containing details of a dice roll, including the number of dice, number of sides, base roll, modifier, total roll with modifier, and the individual rolls.</p> <p>Attributes:</p> <ul> <li> <code>num_dice</code>               (<code>int</code>)           \u2013            <p>Number of dice rolled.</p> </li> <li> <code>num_sides</code>               (<code>int</code>)           \u2013            <p>Number of sides on each die.</p> </li> <li> <code>total</code>               (<code>int</code>)           \u2013            <p>Total value of the dice rolls without modifiers.</p> </li> <li> <code>modifier</code>               (<code>int</code>)           \u2013            <p>Modifier value added to or subtracted from the total roll.</p> </li> <li> <code>total_with_modifier</code>               (<code>int</code>)           \u2013            <p>Total value of the dice rolls including the modifier.</p> </li> <li> <code>rolls</code>               (<code>list</code>)           \u2013            <p>List of individual die roll results.</p> </li> </ul>"},{"location":"reference/dice_roller/#osrlib.dice_roller.DiceRoll.pretty_print","title":"pretty_print","text":"<pre><code>pretty_print() -&gt; str\n</code></pre> <p>Return a human-readable string representation of the dice roll, including the total roll and any modifiers.</p> <p>Returns:</p> <ul> <li> <code>str</code> (              <code>str</code> )          \u2013            <p>A string describing the dice roll and its outcome (e.g., 'Rolled 3d6 and got 11 (11)',  'Rolled 1d20+3 and got 9 (6 + 3)').</p> </li> </ul>"},{"location":"reference/dice_roller/#osrlib.dice_roller.roll_dice","title":"roll_dice","text":"<pre><code>roll_dice(notation: str, modifier: int = 0, drop_lowest: bool = False) -&gt; DiceRoll\n</code></pre> <p>Roll dice based on the nDn or Dn notation and factor in optional modifiers.</p> <p>Examples: <pre><code>roll_dice('3d6') # DiceRoll object representing a roll of three six-sided dice.\nroll_dice('1d20+5') # DiceRoll object for rolling one twenty-sided die with a +5 modifier.\nroll_dice('20') # DiceRoll object for a guaranteed roll of 20.\n</code></pre></p> <p>Parameters:</p> <ul> <li> <code>notation</code>               (<code>str</code>)           \u2013            <p>A string representation of a dice roll in ndn format with optional modifiers like '3d6',             '1d20+5', or '2d8-4', or a string representing an integer, like '1', '20', or '18'.</p> </li> <li> <code>modifier</code>               (<code>int</code>, default:                   <code>0</code> )           \u2013            <p>An optional additional integer modifier to add to the roll. Defaults to 0.</p> </li> <li> <code>drop_lowest</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to drop the lowest dice roll. Defaults to False.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>DiceRoll</code> (              <code>DiceRoll</code> )          \u2013            <p>A named tuple containing the number of dice, number of sides, base roll, modifier, total roll       with modifier, and the individual rolls.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>             \u2013            <p>If the notation or dice sides are invalid.</p> </li> </ul>"},{"location":"reference/dungeon/","title":"dungeon","text":""},{"location":"reference/dungeon/#osrlib.dungeon","title":"dungeon","text":"<p>The <code>dungeon</code> module contains the Dungeon, Location, and Exit classes, and some custom exceptions related to working with them.</p> <p>A <code>Dungeon</code> contains one or more locations, each of which contains one or more exits leading to other locations in the dungeon.</p>"},{"location":"reference/dungeon/#osrlib.dungeon--stock-a-dungeon","title":"Stock a dungeon","text":"<p>To create and stock a dungeon, a typical order of operations might be:</p> <ol> <li>Create the Location objects you'll add to a <code>Dungeon</code> you'll create in a later step.</li> <li>Add Exit objects to the locations. Each location must be bidirectionally connected to at least    one other location by an exit.</li> <li>Create Encounter objects and add a MonsterStatsBlock    to the encounters that should result in battle (or, depending on the block's properties, the chance of a battle).</li> <li>Add the encounters to the locations.</li> <li>Create the Dungeon and add the locations to it.</li> </ol> Tip <p>Before you send a party in to explore a dungeon, ensure the party can navigate to its location by calling the dungeon's <code>validate_connection_locations()</code> method. Doing so returns a bool indicating whether the dungeon's locations are each bidirectionally connected to at least one other <code>Location</code>.</p>"},{"location":"reference/dungeon/#osrlib.dungeon.DestinationLocationNotFoundError","title":"DestinationLocationNotFoundError","text":"<p>               Bases: <code>Exception</code></p> <p>Raised when a destination <code>Location</code> of an <code>Exit</code> doesn't exist in the <code>Dungeon</code>.</p>"},{"location":"reference/dungeon/#osrlib.dungeon.Dungeon","title":"Dungeon","text":"<pre><code>Dungeon(name: str = None, description: str = None, locations: List[Location] = [], start_location_id: int = None, id: str = str(uuid.uuid4()))\n</code></pre> <p>Contains a collection of interconnected <code>Location</code> objects and can validate the integrity of those connections.</p> <p>Attributes:</p> <ul> <li> <code>id</code>               (<code>UUID</code>)           \u2013            <p>Unique identifier for the dungeon.</p> </li> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>The name of the dungeon.</p> </li> <li> <code>description</code>               (<code>str</code>)           \u2013            <p>A brief description providing context or history for the dungeon.</p> </li> <li> <code>locations</code>               (<code>List[Location]</code>)           \u2013            <p>List of locations within the dungeon. A location must have at least one exit, and all exits must have valid destinations within the dungeon. No locations should be islands unless the dungeon only contains that single location.</p> </li> </ul> <p>Example:</p> <pre><code>&gt;&gt;&gt; location1 = Location(1, 10, 10, [Exit(Direction.NORTH, 2)], keywords=[\"rust\", \"armory\"])\n&gt;&gt;&gt; location2 = Location(2, 3, 40, [Exit(Direction.SOUTH, 1)], keywords=[\"cold\", \"corridor\", \"narrow\"])\n&gt;&gt;&gt; dungeon = Dungeon(\"Example Dungeon\", \"An example dungeon.\", [location1, location2])\n&gt;&gt;&gt; if dungeon.validate_connection_locations():\n...     start_location = dungeon.set_start_location(1)\n...     new_location = dungeon.move(Direction.NORTH)\n...     new_location.id\n2\n</code></pre> <p>Parameters:</p> <ul> <li> <code>name</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>The name of the dungeon. Should be unique within an <code>Adventure</code>.</p> </li> <li> <code>description</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>A description of the dungeon appropriate for display to the player.</p> </li> <li> <code>locations</code>               (<code>List[Location]</code>, default:                   <code>[]</code> )           \u2013            <p>The collection of locations within the dungeon.</p> </li> <li> <code>start_location_id</code>               (<code>int</code>, default:                   <code>None</code> )           \u2013            <p>The ID of the <code>Location</code> the <code>Party</code> should begin exploration of the                                dungeon. If you supply this argument, the <code>current_party_location</code> is set                                to this location automatically.</p> </li> <li> <code>id</code>               (<code>str</code>, default:                   <code>str(uuid4())</code> )           \u2013            <p>The ID of the dungeon; must be unique within the <code>Adventure</code>.</p> </li> </ul>"},{"location":"reference/dungeon/#osrlib.dungeon.Dungeon.add_location","title":"add_location","text":"<pre><code>add_location(location: Location) -&gt; None\n</code></pre> <p>Adds the location to the dungeon.</p> <p>Parameters:</p> <ul> <li> <code>location</code>               (<code>Location</code>)           \u2013            <p>The location to add to the dungeon.</p> </li> </ul>"},{"location":"reference/dungeon/#osrlib.dungeon.Dungeon.from_dict","title":"from_dict  <code>classmethod</code>","text":"<pre><code>from_dict(data)\n</code></pre> <p>Returns a <code>Dungeon</code> instance from a dictionary representation of the dungeon. Useful as a post-deserialization step when loading from a permanent data store.</p>"},{"location":"reference/dungeon/#osrlib.dungeon.Dungeon.get_location_by_direction","title":"get_location_by_direction","text":"<pre><code>get_location_by_direction(location: Location, direction: Direction) -&gt; Location\n</code></pre> <p>Get the location in the specified direction from the given location.</p> <p>Parameters:</p> <ul> <li> <code>location</code>               (<code>Location</code>)           \u2013            <p>The location containing the exit whose destination should be returned.</p> </li> <li> <code>direction</code>               (<code>Direction</code>)           \u2013            <p>The direction of the give location's exit whose destination should be returned.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Location</code> (              <code>Location</code> )          \u2013            <p>The location that is the destination of the exit in the specified direction, otherwise <code>None</code> if there is no exit in that direction.</p> </li> </ul>"},{"location":"reference/dungeon/#osrlib.dungeon.Dungeon.get_location_by_id","title":"get_location_by_id","text":"<pre><code>get_location_by_id(location_id: int) -&gt; Location\n</code></pre> <p>Get the location with the specified ID.</p> <p>Parameters:</p> <ul> <li> <code>location_id</code>               (<code>int</code>)           \u2013            <p>The ID of the location to return.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Location</code> (              <code>Location</code> )          \u2013            <p>The location with the specified ID if it exists, otherwise <code>None</code>.</p> </li> </ul>"},{"location":"reference/dungeon/#osrlib.dungeon.Dungeon.get_random_dungeon","title":"get_random_dungeon  <code>staticmethod</code>","text":"<pre><code>get_random_dungeon(name: str = 'Random Dungeon', description: str = '', num_locations: int = 10, level: int = 1, openai_model: OpenAIModelVersion = OpenAIModelVersion.DEFAULT) -&gt; Dungeon\n</code></pre> <p>Generates a random dungeon with the specified number of locations.</p> <p>Parameters:</p> <ul> <li> <code>name</code>               (<code>str</code>, default:                   <code>'Random Dungeon'</code> )           \u2013            <p>The name of the dungeon.</p> </li> <li> <code>description</code>               (<code>str</code>, default:                   <code>''</code> )           \u2013            <p>A brief description providing context or history for the dungeon.</p> </li> <li> <code>num_locations</code>               (<code>int</code>, default:                   <code>10</code> )           \u2013            <p>The number of locations to generate in the dungeon.</p> </li> <li> <code>level</code>               (<code>int</code>, default:                   <code>1</code> )           \u2013            <p>The level of the dungeon. Determines the hit die (and thus the difficulty) of monsters in encounters in the dungeon.</p> </li> <li> <code>openai_model</code>               (<code>OpenAIModelVersion</code>, default:                   <code>DEFAULT</code> )           \u2013            <p>The OpenAI model to use when generating keywords for the locations in the dungeon.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Dungeon</code> (              <code>Dungeon</code> )          \u2013            <p>A randomly generated dungeon with the specified number of locations, each with a random size and      possibly containing an Encounter.</p> </li> </ul> <p>Examples: <pre><code>    # Create a random dungeon without populating its keywords\n    random_dungeon = Dungeon.get_random_dungeon(\n        num_locations=20, openai_model=OpenAIModelVersion.NONE\n    )\n</code></pre></p> <pre><code>    # Create a random dungeon with second-level monsters and 20 locations\n    random_dungeon = Dungeon.get_random_dungeon(\n        \"Dungeon of the Mad Mage\",\n        \"The second level of the underground lair of Glofarnux.\",\n        level=2,\n        num_locations=20,\n        openai_model=OpenAIModelVersion.DEFAULT,\n    )\n</code></pre>"},{"location":"reference/dungeon/#osrlib.dungeon.Dungeon.move","title":"move","text":"<pre><code>move(direction: Direction) -&gt; Location\n</code></pre> <p>Moves the party to the location in the specified direction if there's an exit in that direction and sets the dungeon's current location to the new location.</p> <p>You should set the new location's <code>is_visited</code> attribute to <code>True</code> after you've completed any processing you like when the party arrives at a location for the first time.</p> <p>Example:</p> <p>An example of using the <code>is_visited</code> property is to present a detailed description of the location when a party arrives at a location with <code>is_visited == False' and a brief one-liner description on subsequent visits when</code>is_visited == true`.</p> <pre><code>&gt;&gt;&gt; exit1 = Exit(Direction.NORTH, 2)\n&gt;&gt;&gt; exit2 = Exit(Direction.SOUTH, 1)\n&gt;&gt;&gt; location1 = Location(1, 10, 10, [exit1])\n&gt;&gt;&gt; location2 = Location(2, 10, 10, [exit2], keywords=[\"rust\", \"armory\"])\n&gt;&gt;&gt; dungeon = Dungeon(\"Example Dungeon\", \"An example dungeon.\", [location1, location2])\n&gt;&gt;&gt; start_location = dungeon.set_start_location(1)\n&gt;&gt;&gt; new_location = dungeon.move(Direction.NORTH)\n&gt;&gt;&gt; if new_location:\n...     if new_location.is_visited:\n...         print(f\"Party moved to previously visited location {new_location}.\")\n...     else:\n...         print(f\"The party moved to new location {new_location}, and here's a super detailed description...\")\n...         new_location.is_visited = True\nParty moved to new location LOC ID: 2 Size: 10'W x 10'L Exits: [NORTH:1] Keywords: ['rust', 'armory'], and here's a super detailed description...\n&gt;&gt;&gt; dungeon.current_party_location == new_location\nTrue\n</code></pre> <p>Parameters:</p> <ul> <li> <code>direction</code>               (<code>Direction</code>)           \u2013            <p>The direction of the exit the party should move through.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Location</code> (              <code>Location</code> )          \u2013            <p>The location the party moved to if they were able to move in the specified direction, otherwise <code>None</code>.</p> </li> </ul>"},{"location":"reference/dungeon/#osrlib.dungeon.Dungeon.set_start_location","title":"set_start_location","text":"<pre><code>set_start_location(location_id: int) -&gt; Location\n</code></pre> <p>Sets the <code>Location</code> where <code>Party</code> starts exploring the dungeon if a location with the specified ID exists within the dungeon.</p> <p>If it exists, this method also sets the <code>current_party_location</code> to that location.</p> <p>Parameters:</p> <ul> <li> <code>location_id</code>               (<code>int</code>)           \u2013            <p>The ID of the <code>Location</code> where the party should begin their exploration of the dungeon.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Location</code> (              <code>Location</code> )          \u2013            <p>The starting location if it exists, otherwise <code>None</code>.</p> </li> </ul>"},{"location":"reference/dungeon/#osrlib.dungeon.Dungeon.to_dict","title":"to_dict","text":"<pre><code>to_dict() -&gt; dict\n</code></pre> <p>Returns a dictionary representation of the dungeon. Useful as a pre-serialization step when saving to a permanent data store.</p>"},{"location":"reference/dungeon/#osrlib.dungeon.Dungeon.to_json","title":"to_json","text":"<pre><code>to_json() -&gt; str\n</code></pre> <p>Gets a JSON string representation of the <code>Dungeon</code> instance.</p> <p>This method uses the <code>to_dict</code> method to first convert the dungeon instance into a dictionary, which is then serialized into a JSON string using <code>json.dumps</code>. ]]</p> <p>Returns:</p> <ul> <li> <code>str</code> (              <code>str</code> )          \u2013            <p>A JSON string representation of the dungeon instance.</p> </li> </ul> <p>Example: <pre><code>    # Create a random dungeon without populating its keywords\n    random_dungeon = Dungeon.get_random_dungeon(\n        num_locations=20, openai_model=OpenAIModelVersion.NONE\n    )\n\n    # Get the JSON representation (you could write this to disk)\n    dungeon_json = random_dungeon.to_json()\n\n    # Parse it to a Python dict\n    dungeon_dict = json.loads(dungeon_json)\n\n    # Turn it back into a Dungeon\n    dungeon = Dungeon.from_dict(dungeon_dict)\n</code></pre></p>"},{"location":"reference/dungeon/#osrlib.dungeon.Dungeon.validate_location_connections","title":"validate_location_connections","text":"<pre><code>validate_location_connections() -&gt; bool\n</code></pre> <p>Verifies whether every Location in the dungeon is connected to at least one other location and that a connection in the opposite direction exists. For example, if location A has an exit EAST to location B, then location B must have an exit WEST to location A.</p> <p>Every location in a dungeon must be part of an interconnected graph where each \"source\" location has at least one exit leading a \"destination\" location in the dungeon. Each destination location must also have a corresponding exit in the opposite direction whose destination is the source location.</p> <p>Empty dungeons and those with only one location are considered valid.</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p><code>True</code> if all locations in the dungeon are connected by at least one bi-directional exit to another location, otherwise <code>False</code>.</p> </li> </ul>"},{"location":"reference/dungeon/#osrlib.dungeon.Exit","title":"Exit","text":"<pre><code>Exit(direction: Direction, destination: int, locked: bool = False)\n</code></pre> <p>Represents an exit leading from one Location to another in a Dungeon.</p> <p>An exit can be <code>locked</code>, which allows you to control access to its destination based on some condition. For example, you could require that one of the player's characters has a specific Item in their Inventory that acts as the \"key\" before allowing them to move to the exit's destination.</p> <p>Attributes:</p> <ul> <li> <code>direction</code>               (<code>Direction</code>)           \u2013            <p>The direction of the exit. Each location can have only one exit per direction.</p> </li> <li> <code>destination</code>               (<code>int</code>)           \u2013            <p>The ID of the destination Location. Must exist within the dungeon.</p> </li> <li> <code>locked</code>               (<code>bool</code>)           \u2013            <p>Indicates if the exit is locked or not.</p> </li> <li> <code>opposite_direction</code>               (<code>Direction</code>)           \u2013            <p>The direction directly opposite this exit's direction. There is no contract                             that guarantees a corresponding return exit exists in the destination location's                             exits collection.</p> </li> </ul> <p>Example: <pre><code>    # Create two Exits for a Location\n    exit1 = Exit(Direction.NORTH, 2)\n    exit2 = Exit(Direction.SOUTH, 1)\n\n    # Create the Location and pass the Exits as params\n    location = Location(\n        id=1,\n        width=10,\n        length=10,\n        exits=[exit1, exit2],\n        keywords=[\"library\", \"ransacked\"],\n    )\n</code></pre></p> <p>Parameters:</p> <ul> <li> <code>direction</code>               (<code>Direction</code>)           \u2013            <p>The direction in which the exit faces. For example, the wall the exit is on in a room                    or the direction in which a tunnel turns.</p> </li> <li> <code>destination</code>               (<code>int</code>)           \u2013            <p>The ID of the Location the exits leads to.</p> </li> <li> <code>locked</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether the party is prevented from to going through the exit. Defaults to <code>False</code>.</p> </li> </ul>"},{"location":"reference/dungeon/#osrlib.dungeon.Exit.from_dict","title":"from_dict  <code>classmethod</code>","text":"<pre><code>from_dict(data)\n</code></pre> <p>Deserializes a dictionary representation of an <code>Exit</code> object. Typically done after getting the dictionary from persistent storage.</p>"},{"location":"reference/dungeon/#osrlib.dungeon.Exit.lock","title":"lock","text":"<pre><code>lock()\n</code></pre> <p>Locks the exit.</p>"},{"location":"reference/dungeon/#osrlib.dungeon.Exit.to_dict","title":"to_dict","text":"<pre><code>to_dict()\n</code></pre> <p>Serializes the <code>Exit</code> to a dictionary, typically in preparation for writing it to persistent storage in a downstream operation.</p>"},{"location":"reference/dungeon/#osrlib.dungeon.Exit.unlock","title":"unlock","text":"<pre><code>unlock()\n</code></pre> <p>Unlocks the exit.</p>"},{"location":"reference/dungeon/#osrlib.dungeon.ExitAlreadyExistsError","title":"ExitAlreadyExistsError","text":"<p>               Bases: <code>Exception</code></p> <p>Raised when trying to add an exit to a location, but an exit in that direction already exists.</p>"},{"location":"reference/dungeon/#osrlib.dungeon.Location","title":"Location","text":"<pre><code>Location(id: int, width: int = 10, length: int = 10, exits: List[Exit] = [], keywords: List[str] = [], encounter: Encounter = None, is_visited: bool = False)\n</code></pre> <p>Represents a location of importance within a <code>Dungeon</code>.</p> <p>Attributes:</p> <ul> <li> <code>id</code>               (<code>int</code>)           \u2013            <p>Unique identifier for the location. Must be unique within the dungeon.</p> </li> <li> <code>dimensions</code>               (<code>dict</code>)           \u2013            <p>Dimensions of the location in a <code>{\"width\": int, \"length\": int}</code> format. Default dimensions are 10x10.</p> </li> <li> <code>exits</code>               (<code>List[Exit]</code>)           \u2013            <p>List of exits leading to other locations. Each location must have at least one exit and each exit must have a unique direction.</p> </li> <li> <code>keywords</code>               (<code>List[str]</code>)           \u2013            <p>Keywords associated with the location for search or identification.</p> </li> <li> <code>encounter</code>               (<code>Encounter</code>)           \u2013            <p>An optional encounter that exists within this location.</p> </li> </ul> <p>Example:</p> <pre><code> &gt;&gt;&gt; exit1 = Exit(Direction.NORTH, 2)\n &gt;&gt;&gt; exit2 = Exit(Direction.SOUTH, 1)\n &gt;&gt;&gt; location1 = Location(1, 10, 10, [exit1])\n &gt;&gt;&gt; location2 = Location(2, 8, 8, [exit2], keywords=[\"rust\", \"armory\"])\n &gt;&gt;&gt; dungeon = Dungeon(\"Example Dungeon\", \"An example dungeon.\", [location1, location2])\n &gt;&gt;&gt; # Validate the dungeon before proceeding with the game logic\n &gt;&gt;&gt; dungeon.validate_connection_locations()\n True\n</code></pre> <p>Parameters:</p> <ul> <li> <code>id</code>               (<code>int</code>)           \u2013            <p>The ID of the <code>Location</code>; must be unique within a <code>Dungeon</code>.</p> </li> <li> <code>width</code>               (<code>int</code>, default:                   <code>10</code> )           \u2013            <p>The width of the location in feet.</p> </li> <li> <code>length</code>               (<code>int</code>, default:                   <code>10</code> )           \u2013            <p>The length of the location in feet.</p> </li> <li> <code>exits</code>               (<code>List[Exit]</code>, default:                   <code>[]</code> )           \u2013            <p>The collection of exits leading from the location.</p> </li> <li> <code>keywords</code>               (<code>List[str]</code>, default:                   <code>[]</code> )           \u2013            <p>The keywords that describe the location.</p> </li> <li> <code>encounter</code>               (<code>Encounter</code>, default:                   <code>None</code> )           \u2013            <p>An encounter the party can interact with when it arrives at the location.</p> </li> <li> <code>is_visited</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether the party has previously been to the location.</p> </li> </ul>"},{"location":"reference/dungeon/#osrlib.dungeon.Location.json","title":"json  <code>property</code>","text":"<pre><code>json\n</code></pre> <p>Returns a JSON representation of the location.</p>"},{"location":"reference/dungeon/#osrlib.dungeon.Location.add_exit","title":"add_exit","text":"<pre><code>add_exit(exit: Exit)\n</code></pre> <p>Adds an exit to the location.</p> <p>Parameters:</p> <ul> <li> <code>exit</code>               (<code>Exit</code>)           \u2013            <p>The exit to add to the location.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>             \u2013            <p>If an exit already exists in the same direction.</p> </li> </ul>"},{"location":"reference/dungeon/#osrlib.dungeon.Location.from_dict","title":"from_dict  <code>classmethod</code>","text":"<pre><code>from_dict(data)\n</code></pre> <p>Deserializes a dictionary representation of a <code>Location</code> object. Typically done after getting the dictionary from persistent storage.</p>"},{"location":"reference/dungeon/#osrlib.dungeon.Location.get_exit","title":"get_exit","text":"<pre><code>get_exit(direction: Direction) -&gt; Exit\n</code></pre> <p>Returns the exit in the specified direction, if it exists.</p> <p>Parameters:</p> <ul> <li> <code>direction</code>               (<code>Direction</code>)           \u2013            <p>The direction of the exit to return.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Exit</code> (              <code>Exit</code> )          \u2013            <p>The exit in the specified direction, or None if there is no exit in that direction.</p> </li> </ul>"},{"location":"reference/dungeon/#osrlib.dungeon.Location.to_dict","title":"to_dict","text":"<pre><code>to_dict()\n</code></pre> <p>Serializes the <code>Location</code> to a dictionary, typically in preparation for writing it to persistent storage in a downstream operation.</p>"},{"location":"reference/dungeon/#osrlib.dungeon.LocationAlreadyExistsError","title":"LocationAlreadyExistsError","text":"<p>               Bases: <code>Exception</code></p> <p>Raised when trying to add a location to the dungeon's locations collection, but a location with the same ID already exists.</p>"},{"location":"reference/dungeon/#osrlib.dungeon.LocationNotFoundError","title":"LocationNotFoundError","text":"<p>               Bases: <code>Exception</code></p> <p>Raised when a location cannot be found in a dungeon.</p>"},{"location":"reference/dungeon/#osrlib.dungeon.NoMatchingExitError","title":"NoMatchingExitError","text":"<p>               Bases: <code>Exception</code></p> <p>Raised when an <code>Exit</code> in a <code>Location</code> doesn't have a corresponding <code>Exit</code> back to the source <code>Location</code>.</p>"},{"location":"reference/dungeon/#osrlib.dungeon.ReturnConnectionDestinationIncorrectError","title":"ReturnConnectionDestinationIncorrectError","text":"<p>               Bases: <code>Exception</code></p> <p>Raised when an <code>Exit</code> in a <code>Location</code> leads to a destination <code>Location</code> whose corresponding return <code>Exit</code> direction is correct, but its destination <code>Location</code> is incorrect.</p>"},{"location":"reference/dungeon_assistant/","title":"dungeon_assistant","text":""},{"location":"reference/dungeon_assistant/#osrlib.dungeon_assistant","title":"dungeon_assistant","text":"<p>The <code>dungeon_assistant</code> module contains the <code>DungeonAssistant</code> class that interfaces with the OpenAI API and performs the duties of the game's referee and guide (game master or dungeon master in some tabletop RPGs).</p>"},{"location":"reference/dungeon_assistant/#osrlib.dungeon_assistant.DungeonAssistant","title":"DungeonAssistant","text":"<pre><code>DungeonAssistant(adventure: Adventure = None, openai_model: OpenAIModelVersion = OpenAIModelVersion.DEFAULT)\n</code></pre> <p>The <code>DungeonAssistant</code> is the primary interface between the player, the game world's rules engine, and optionally the OpenAI API.</p> <p>Actions initiated by the player might be handled completely within the bounds of the local game engine, or they might involve a call to the OpenAI API. The <code>DungeonAssistant</code> class is responsible for determining which actions are handled locally and which are handled by the OpenAI API.</p> <p>Attributes:</p> <ul> <li> <code>adventure</code>               (<code>Adventure</code>)           \u2013            <p>The adventure the <code>DungeonAssistant</code> is running.</p> </li> <li> <code>session_messages</code>               (<code>list</code>)           \u2013            <p>The collective list of messages sent to the OpenAI API during a game session. Each of the player's <code>user</code> role messages is appended to this list, as is each 'assistant' role message returned by the OpenAI API in response.</p> </li> <li> <code>session_is_started</code>               (<code>bool</code>)           \u2013            <p>Indicates whether the game session has started. The game session starts upon first call to the <code>start_session()</code> method.</p> </li> </ul>"},{"location":"reference/dungeon_assistant/#osrlib.dungeon_assistant.DungeonAssistant.format_user_message","title":"format_user_message","text":"<pre><code>format_user_message(message_string: str) -&gt; dict\n</code></pre> <p>Format the given string as an OpenAI 'user' role message.</p> <p>This method returns a dict with a 'role' key's value set to 'user' and the given string as the 'content' key's value. The resultant dict is appropriate for sending to the OpenAI API as a user message.</p> <p>Example:</p> <p>The string returned by this method is in the following format and is appropriate for sending to the OpenAI API as a user message:</p> <pre><code>{\n    \"role\": \"user\",\n    \"content\": \"The string passed to this method.\"\n}\n</code></pre> <p>Parameters:</p> <ul> <li> <code>message_string</code>               (<code>str</code>)           \u2013            <p>The string to format as an OpenAI user message. It must be a regular string and not a JSON string.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict</code> (              <code>dict</code> )          \u2013            <p>A version of the user message as a Python <code>dict</code>.</p> </li> </ul>"},{"location":"reference/dungeon_assistant/#osrlib.dungeon_assistant.DungeonAssistant.move_party","title":"move_party","text":"<pre><code>move_party(direction) -&gt; str\n</code></pre> <p>Move the party in the given direction.</p>"},{"location":"reference/dungeon_assistant/#osrlib.dungeon_assistant.DungeonAssistant.send_player_message","title":"send_player_message","text":"<pre><code>send_player_message(message)\n</code></pre> <p>Send a message from the player to the Dungeon Assistant and return the response.</p>"},{"location":"reference/dungeon_assistant/#osrlib.dungeon_assistant.DungeonAssistant.start_session","title":"start_session","text":"<pre><code>start_session() -&gt; str\n</code></pre> <p>Start a gaming session with the dungeon assistant in the current adventure.</p> <p>If this the first session in the adventure, the adventure is marked as started and the dungeon assistant's (system) init message is sent to the OpenAI API as is player's (user) init message. If it's not the first session of the adventure, only the system and user init messages are sent.</p> <p>Returns:</p> <ul> <li> <code>str</code> (              <code>str</code> )          \u2013            <p>The response from the Dungeon Assistant (in this case, the OpenAI API) when initiating a game session. This string is appropriate for display to the player.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>             \u2013            <p>If there is no active adventure. Call set_active_adventure() with a valid adventure before calling start_session().</p> </li> </ul>"},{"location":"reference/encounter/","title":"encounter","text":""},{"location":"reference/encounter/#osrlib.encounter","title":"encounter","text":""},{"location":"reference/encounter/#osrlib.encounter.Encounter","title":"Encounter","text":"<pre><code>Encounter(name, description: str = '', monster_party: MonsterParty = None, treasure_type: TreasureType = TreasureType.NONE)\n</code></pre> <p>An encounter represents something the party discovers, confronts, or experiences at a Location in a Dungeon.</p> <p>An encounter typically represents a group of monsters the party can fight, but it could also just be a notable location or other non-combat encounter in which the party receives information or perhaps a quest piece for reaching that Location.</p> <p>Attributes:</p> <ul> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>The name or ID of the encounter.</p> </li> <li> <code>description</code>               (<code>str</code>)           \u2013            <p>The description of the encounter (location, environment, etc.).</p> </li> <li> <code>monsters</code>               (<code>MonsterParty</code>)           \u2013            <p>The party of monsters in the encounter.</p> </li> <li> <code>treasure_type</code>               (<code>(TreasureType, Optional)</code>)           \u2013            <p>The type of treasure available for award to the party at this location.                                     This treasure is in addition to any treasure associated with monsters                                     defeated by the party if this is a combat encounter.</p> </li> <li> <code>turn_order</code>               (<code>deque</code>)           \u2013            <p>A deque of the combatants in the encounter, sorted by initiative roll.</p> </li> <li> <code>is_started</code>               (<code>bool</code>)           \u2013            <p>Whether the encounter has started.</p> </li> <li> <code>is_ended</code>               (<code>bool</code>)           \u2013            <p>Whether the encounter has ended.</p> </li> </ul> <p>Parameters:</p> <ul> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>The name or ID of the encounter.</p> </li> <li> <code>description</code>               (<code>str</code>, default:                   <code>''</code> )           \u2013            <p>The description of the encounter (location, environment, etc.). Optional.</p> </li> <li> <code>monster_party</code>               (<code>MonsterParty</code>, default:                   <code>None</code> )           \u2013            <p>The party of monsters in the encounter. Optional.</p> </li> <li> <code>treasure_type</code>               (<code>TreasureType</code>, default:                   <code>NONE</code> )           \u2013            <p>The type of treasure at this location available for award to the party.</p> </li> </ul>"},{"location":"reference/encounter/#osrlib.encounter.Encounter.end_encounter","title":"end_encounter","text":"<pre><code>end_encounter()\n</code></pre> <p>Ends an encounter that was previously started with <code>start_encounter()</code>.</p> <p>This method concludes the encounter, performing actions like determining the outcome if it was a combat encounter (whether the player's party or the monsters won) and awarding experience points, if applicable. It sets the <code>is_started</code> and <code>is_ended</code> flags appropriately to indicate that the encounter has concluded, and if the player's party won, awards experience points as dictated by the MonsterParty's <code>xp_value</code> to the party.</p> <p>After calling <code>end_encounter()</code> is when you can consider the encounter \"over,\" and when you'd typically record or otherwise process the play-by-play encounter log available through its <code>get_encounter_log()</code> method. It's also when you could check to see if any PCs in the player's party have gained a level, and perform appopriate actions in your UI (for example) if so.</p> <p>Example: <pre><code># Assuming 'encounter' is an instance of Encounter, this ends the encounter and\n# awards experience points to the party if appropriate, such as if they defeated\n# a monsters, gained treasure, or both.\nencounter.end_encounter()\n</code></pre></p>"},{"location":"reference/encounter/#osrlib.encounter.Encounter.from_dict","title":"from_dict  <code>classmethod</code>","text":"<pre><code>from_dict(encounter_dict: dict) -&gt; Encounter\n</code></pre> <p>Deserialize a dictionary into an Encounter instance.</p> <p>This class method creates a new instance of <code>Encounter</code> using the data in the dictionary. The dictionary should contain keys corresponding to the attributes of an Encounter, including a serialized MonsterParty instance if there was one in the <code>Encounter</code> when it was serialized. If the <code>is_ended</code> attribute of the <code>Encounter</code> being deserialized with <code>from_dict</code> is <code>True</code>, the <code>Encounter</code>'s <code>end_encounter()</code> method is called as part of the deserialization process.</p> <p>Example:</p> <pre><code># Assuming 'encounter_dict' is a previously serialized Encounter dictionary\nencounter = Encounter.from_dict(encounter_dict)\n\n# The 'encounter' is now a rehydrated instance of the Encounter class\n</code></pre> <p>Parameters:</p> <ul> <li> <code>encounter_dict</code>               (<code>dict</code>)           \u2013            <p>A dictionary containing the encounter's attributes.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Encounter</code> (              <code>Encounter</code> )          \u2013            <p>An instance of Encounter initialized with the data from the dictionary.</p> </li> </ul>"},{"location":"reference/encounter/#osrlib.encounter.Encounter.get_encounter_log","title":"get_encounter_log","text":"<pre><code>get_encounter_log() -&gt; str\n</code></pre> <p>Return the encounter log as a string.</p>"},{"location":"reference/encounter/#osrlib.encounter.Encounter.get_random_encounter","title":"get_random_encounter  <code>classmethod</code>","text":"<pre><code>get_random_encounter(dungeon_level: int) -&gt; Encounter\n</code></pre> <p>Get a random encounter appropriate for the specified dungeon level.</p> <p>The <code>dungeon_level</code> corresponds to the monster's number of hit dice, and the encounter will contain monsters of the same type and at that level (number of hit dice). For example, if <code>dungeon_level</code> is <code>1</code>, the encounter will contain monsters with 1d8 or 1d8+n hit die. If <code>dungeon_level</code> is <code>3</code>, the encounter will contain monsters with 3 or 3d8+n hit dice.</p> <p>Parameters:</p> <ul> <li> <code>dungeon_level</code>               (<code>int</code>)           \u2013            <p>The level of dungeon the encounter should be appropriate for.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Encounter</code> (              <code>Encounter</code> )          \u2013            <p>A random encounter.</p> </li> </ul>"},{"location":"reference/encounter/#osrlib.encounter.Encounter.log_mesg","title":"log_mesg","text":"<pre><code>log_mesg(message: Optional[str])\n</code></pre> <p>Log an encounter message.</p> <p>Parameters:</p> <ul> <li> <code>message</code>               (<code>Optional[str]</code>)           \u2013            <p>The message to log. If None, no message is logged.</p> </li> </ul>"},{"location":"reference/encounter/#osrlib.encounter.Encounter.start_encounter","title":"start_encounter","text":"<pre><code>start_encounter(party: Party)\n</code></pre> <p>Start the encounter with the given party.</p> <p>This method initiates the encounter and sets up conditions like determining surprise and starting combat if the encounter contains a hostile MonsterParty. If so, it compares the surprise rolls of the player's party and the monster party to decide which party is surprised, then proceeds to start combat with its <code>_start_combat</code> private method if combat is necessary. If there are no monsters, the encounter proceeds as a non-combat scenario.</p> <p>Parameters:</p> <ul> <li> <code>party</code>               (<code>Party</code>)           \u2013            <p>The player's party involved in the encounter.</p> </li> </ul> <p>Example: <pre><code># Assuming 'encounter' is an instance of Encounter and 'player_party' is an instance of Party\nencounter.start_encounter(player_party)\n\n# This initiates the encounter, determining surprise, starting combat if applicable,\n# and logging the start of the encounter.\n</code></pre></p>"},{"location":"reference/encounter/#osrlib.encounter.Encounter.to_dict","title":"to_dict","text":"<pre><code>to_dict() -&gt; dict\n</code></pre> <p>Serialize the Encounter instance to a dictionary format.</p> <p>This method converts the Encounter's attributes, including the associated MonsterParty, into a dictionary. This is particularly useful for saving the state of an encounter to persistent storage.</p> <p>Returns:</p> <ul> <li> <code>dict</code> (              <code>dict</code> )          \u2013            <p>A dictionary representation of the Encounter instance.</p> </li> </ul> <p>Example: <pre><code># Assuming 'encounter' is an instance of Encounter\nencounter_dict = encounter.to_dict()\n\n# The encounter_dict could now be used to store the state of the Encounter,\n# for example by converting the dict to JSON or storing in a database.\n# You could also pass encounter_dict the from_dict() method to recreate\n# the encounter.\n</code></pre></p>"},{"location":"reference/enums/","title":"enums","text":""},{"location":"reference/enums/#osrlib.enums","title":"enums","text":""},{"location":"reference/enums/#osrlib.enums.CoinType","title":"CoinType","text":"<pre><code>CoinType(description: str, exchange_rate: float)\n</code></pre> <p>               Bases: <code>Enum</code></p>"},{"location":"reference/enums/#osrlib.enums.CoinType.value_in_gold","title":"value_in_gold  <code>staticmethod</code>","text":"<pre><code>value_in_gold(coin_amounts: dict) -&gt; int\n</code></pre> <p>Calculate the combined value in gold pieces based on the coin amounts, rounded up to the nearest integer.</p> <p>Parameters:</p> <ul> <li> <code>coin_amounts</code>               (<code>dict</code>)           \u2013            <p>A dictionary with CoinType as key and quantity of that type as value.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code> (              <code>int</code> )          \u2013            <p>The total value in gold pieces, rounded up to the nearest integer.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; CoinType.value_in_gold({CoinType.COPPER: 1000, CoinType.SILVER: 100})\n20\n&gt;&gt;&gt; CoinType.value_in_gold({CoinType.GOLD: 100})\n100\n&gt;&gt;&gt; coin_type_string = CoinType.GOLD.name\n&gt;&gt;&gt; coins = {CoinType[coin_type_string]: 100}\n&gt;&gt;&gt; CoinType.value_in_gold(coins)\n100\n</code></pre>"},{"location":"reference/enums/#osrlib.enums.TreasureType","title":"TreasureType","text":"<p>               Bases: <code>Enum</code></p> <p>Specifies the type of treasure in a treasure haul the party might be awarded.</p>"},{"location":"reference/inventory/","title":"inventory","text":""},{"location":"reference/inventory/#osrlib.inventory","title":"inventory","text":"<p>The <code>inventory</code> module includes the Inventory class which backs the <code>inventory</code> attribute of a PlayerCharacter.</p>"},{"location":"reference/inventory/#osrlib.inventory.Inventory","title":"Inventory","text":"<pre><code>Inventory(player_character_owner: PlayerCharacter)\n</code></pre> <p>A container to hold and manage items owned by a <code>PlayerCharacter</code>.</p> <p>You should not create an Inventory directly. When you initialize a PlayerCharacter, an inventory is created as a property of the PC. You can then add and remove items to and from the inventory using methods on the <code>PlayerCharacter</code>.</p> <p>Attributes:</p> <ul> <li> <code>item_dict</code>               (<code>defaultdict[ItemType, List[Item]]</code>)           \u2013            <p>List of items in the inventory.</p> </li> <li> <code>owner</code>               (<code>PlayerCharacter</code>)           \u2013            <p>Owner of the inventory.</p> </li> </ul> <p>Example:</p> <pre><code>&gt;&gt;&gt; pc = PlayerCharacter()\n&gt;&gt;&gt; inv = Inventory(pc)\n</code></pre> <p>Parameters:</p> <ul> <li> <code>player_character_owner</code>               (<code>PlayerCharacter</code>)           \u2013            <p>The player character that owns the inventory.</p> </li> </ul>"},{"location":"reference/inventory/#osrlib.inventory.Inventory.all_items","title":"all_items  <code>property</code>","text":"<pre><code>all_items: List[Item]\n</code></pre> <p>Gets all items stored in the items defaultdict inventory property.</p> <p>Returns:</p> <ul> <li> <code>List[Item]</code>           \u2013            <p>List of all items in the inventory.</p> </li> </ul>"},{"location":"reference/inventory/#osrlib.inventory.Inventory.armor","title":"armor  <code>property</code>","text":"<pre><code>armor: List[Armor]\n</code></pre> <p>Gets all armor items stored in the items defaultdict inventory property.</p> <p>Returns:</p> <ul> <li> <code>List[Armor]</code>           \u2013            <p>List of armor items. Returns an empty list if no armor items are present.</p> </li> </ul>"},{"location":"reference/inventory/#osrlib.inventory.Inventory.equipment","title":"equipment  <code>property</code>","text":"<pre><code>equipment: List[Item]\n</code></pre> <p>Gets all equipment items stored in the items defaultdict inventory property.</p> <p>Returns:</p> <ul> <li> <code>List[Item]</code>           \u2013            <p>List of equipment items. Returns an empty list if no equipment items are present.</p> </li> </ul>"},{"location":"reference/inventory/#osrlib.inventory.Inventory.equipped_items","title":"equipped_items  <code>property</code>","text":"<pre><code>equipped_items: List[Item]\n</code></pre> <p>Get all equipped items in the inventory.</p> <p>Returns:</p> <ul> <li> <code>List[Item]</code>           \u2013            <p>List of equipped items. Returns an empty list if no equipped items are present.</p> </li> </ul>"},{"location":"reference/inventory/#osrlib.inventory.Inventory.magic_items","title":"magic_items  <code>property</code>","text":"<pre><code>magic_items: List[Item]\n</code></pre> <p>Gets all magic items stored in the items defaultdict inventory property.</p> <p>Returns:</p> <ul> <li> <code>List[Item]</code>           \u2013            <p>List of magic items. Returns an empty list if no magic items are present.</p> </li> </ul>"},{"location":"reference/inventory/#osrlib.inventory.Inventory.misc_items","title":"misc_items  <code>property</code>","text":"<pre><code>misc_items: List[Item]\n</code></pre> <p>Gets all miscellaneous items stored in the items defaultdict inventory property.</p> <p>Miscellaneous items include items that are not armor, weapons, spells, equipment, or magic items.</p> <p>Returns:</p> <ul> <li> <code>List[Item]</code>           \u2013            <p>List of miscellaneous items. Returns an empty list if no miscellaneous items are present.</p> </li> </ul>"},{"location":"reference/inventory/#osrlib.inventory.Inventory.spells","title":"spells  <code>property</code>","text":"<pre><code>spells: List[Spell]\n</code></pre> <p>Gets all spell items stored in the items defaultdict inventory property.</p> <p>Returns:</p> <ul> <li> <code>List[Spell]</code>           \u2013            <p>List of spell items. Returns an empty list if no spell items are present.</p> </li> </ul>"},{"location":"reference/inventory/#osrlib.inventory.Inventory.weapons","title":"weapons  <code>property</code>","text":"<pre><code>weapons: List[Weapon]\n</code></pre> <p>Gets all weapon items stored in the items defaultdict inventory property.</p> <p>Returns:</p> <ul> <li> <code>List[Weapon]</code>           \u2013            <p>List of weapon items. Returns an empty list if no weapon items are present.</p> </li> </ul>"},{"location":"reference/inventory/#osrlib.inventory.Inventory.add_item","title":"add_item","text":"<pre><code>add_item(item: Item)\n</code></pre> <p>Add an item to the inventory and sets its owner.</p> <p>Parameters:</p> <ul> <li> <code>item</code>               (<code>Item</code>)           \u2013            <p>Item to add.</p> </li> </ul>"},{"location":"reference/inventory/#osrlib.inventory.Inventory.drop_all_items","title":"drop_all_items","text":"<pre><code>drop_all_items() -&gt; List[Item]\n</code></pre> <p>Remove all items from the inventory and return a collection of the items that were removed.</p> <p>Equipped items are unequipped prior to being removed.</p> <p>Returns:</p> <ul> <li> <code>List[Item]</code>           \u2013            <p>List of all items that were removed.</p> </li> </ul>"},{"location":"reference/inventory/#osrlib.inventory.Inventory.equip_item","title":"equip_item","text":"<pre><code>equip_item(item: Item) -&gt; bool\n</code></pre> <p>Equips an item if it can be equipped.</p> <p>Parameters:</p> <ul> <li> <code>item</code>               (<code>Item</code>)           \u2013            <p>Item to equip.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>Whether the item was successfully equipped.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ItemNotUsableError</code>             \u2013            <p>If the item is not usable by the owner's character class.</p> </li> </ul>"},{"location":"reference/inventory/#osrlib.inventory.Inventory.from_dict","title":"from_dict  <code>classmethod</code>","text":"<pre><code>from_dict(inventory_dict: dict, player_character_owner: PlayerCharacter) -&gt; Inventory\n</code></pre> <p>Deserializes a dictionary representation of an <code>Inventory</code> object. Typically done after getting the dictionary from persistent storage.</p> <p>Parameters:</p> <ul> <li> <code>inventory_dict</code>               (<code>dict</code>)           \u2013            <p>Dictionary representation of the inventory.</p> </li> <li> <code>player_character_owner</code>               (<code>PlayerCharacter</code>)           \u2013            <p>The player character that owns the inventory.</p> </li> </ul>"},{"location":"reference/inventory/#osrlib.inventory.Inventory.get_equipped_weapon","title":"get_equipped_weapon","text":"<pre><code>get_equipped_weapon() -&gt; Weapon\n</code></pre> <p>Gets the first equipped weapon in the inventory.</p> <p>Returns:</p> <ul> <li> <code>Weapon</code> (              <code>Weapon</code> )          \u2013            <p>The equipped weapon. Returns \"Fists\" (1 HP damage) if no other weapon is equipped.</p> </li> </ul>"},{"location":"reference/inventory/#osrlib.inventory.Inventory.get_item","title":"get_item","text":"<pre><code>get_item(item: Item) -&gt; Item\n</code></pre> <p>Gets an item from the inventory.</p> <p>Parameters:</p> <ul> <li> <code>item</code>               (<code>Item</code>)           \u2013            <p>Item to get from the inventory.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Item</code> (              <code>Item</code> )          \u2013            <p>The item if it exists in the inventory, otherwise an Exception is thrown.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>Exception</code>             \u2013            <p>If the item does not exist in the inventory.</p> </li> </ul>"},{"location":"reference/inventory/#osrlib.inventory.Inventory.remove_item","title":"remove_item","text":"<pre><code>remove_item(item: Item) -&gt; bool\n</code></pre> <p>Removes an item from the inventory and resets its owner to None.</p> <p>Parameters:</p> <ul> <li> <code>item</code>               (<code>Item</code>)           \u2013            <p>Item to remove.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>Whether the item was successfully removed from the inventory.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>Exception</code>             \u2013            <p>If the item is currently equipped.</p> </li> </ul>"},{"location":"reference/inventory/#osrlib.inventory.Inventory.to_dict","title":"to_dict","text":"<pre><code>to_dict() -&gt; dict\n</code></pre> <p>Serializes the <code>Inventory</code> to a dictionary, typically in preparation for writing it to persistent storage in a downstream operation.</p>"},{"location":"reference/inventory/#osrlib.inventory.Inventory.unequip_item","title":"unequip_item","text":"<pre><code>unequip_item(item: Item) -&gt; bool\n</code></pre> <p>Unequips an item if it is currently equipped.</p> <p>Parameters:</p> <ul> <li> <code>item</code>               (<code>Item</code>)           \u2013            <p>Item to unequip.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>Whether the item was successfully unequipped.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>Exception</code>             \u2013            <p>If the item is not currently equipped.</p> </li> </ul>"},{"location":"reference/item/","title":"item","text":""},{"location":"reference/item/#osrlib.item","title":"item","text":"<p>The <code>item</code> module includes classes that represent items in the game like weapons, armor, spells, and regular adventuring gear.</p>"},{"location":"reference/item/#osrlib.item.Armor","title":"Armor","text":"<pre><code>Armor(name: str, ac_modifier: int = -1, **kwargs: dict[str, any])\n</code></pre> <p>               Bases: <code>Item</code></p> <p>An Armor item modifies the armor class (AC) of a player character (PC).</p> <p>Inherits all attributes from the Item class and introduces an additional attribute for AC modification.</p> <p>The bonus of any non-cursed magic armor or shield is subtracted from the character's AC. For example, a fighter wearing plate mail armor and using a shield (but with no Dexterity modifier) has an AC of 2. If the fighter uses a shield + 1, their AC = 1.</p> <p>Attributes:</p> <ul> <li> <code>ac_modifier</code>               (<code>int</code>)           \u2013            <p>Armor class (AC) bonus or penalty provided by this armor. A positive number reduces AC (good) and a negative number increases AC (bad). Defaults to 1.</p> </li> </ul> <p>Example:</p> <pre><code># Create a suit of plate mail\narmor = Armor(\"Plate Mail\", ac_modifier=7)\n</code></pre> <p>Parameters:</p> <ul> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>Name of the item.</p> </li> <li> <code>ac_modifier</code>               (<code>int</code>, default:                   <code>-1</code> )           \u2013            <p>AC modifier. Lower is better. Defaults to -1.</p> </li> <li> <code>**kwargs</code>               (<code>dict[str, any]</code>, default:                   <code>{}</code> )           \u2013            <p>Additional arguments to pass to the parent class.</p> </li> </ul>"},{"location":"reference/item/#osrlib.item.Item","title":"Item","text":"<pre><code>Item(name: str, item_type: ItemType = ItemType.ITEM, usable_by_classes: Optional[Set[CharacterClassType]] = None, max_equipped: int = 0, gp_value: int = 0, quest: Optional[Quest] = None)\n</code></pre> <p>An item represents a piece of equipment, a weapon, spell, quest piece, any other item that can be owned by a player character (PC).</p> <p>You can specify that an item can be equipped by a PC and that more than one of that item type can be equipped.</p> <p>Any item can be marked as a quest piece by setting its quest attribute. Quest pieces are items required to be obtained as part of a quest. An item can be both a quest piece and usable by a PC, for example, an enchanted (or cursed!) sword or magic ring.</p> <p>Attributes:</p> <ul> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>Name of the item.</p> </li> <li> <code>item_type</code>               (<code>ItemType</code>)           \u2013            <p>Type of the item. Defaults to ItemType.ITEM.</p> </li> <li> <code>owner</code>               (<code>Optional[PlayerCharacter]</code>)           \u2013            <p>The owner of the item.</p> </li> <li> <code>usable_by_classes</code>               (<code>Set[CharacterClassType]</code>)           \u2013            <p>Classes that can use the item.</p> </li> <li> <code>max_equipped</code>               (<code>int</code>)           \u2013            <p>Max number of this item that can be equipped.</p> </li> <li> <code>is_equipped</code>               (<code>bool</code>)           \u2013            <p>Whether the item is currently equipped.</p> </li> <li> <code>gp_value</code>               (<code>int</code>)           \u2013            <p>The value of the item in gold pieces (gp).</p> </li> <li> <code>quest</code>               (<code>Optional[Quest]</code>)           \u2013            <p>The quest that the item is a part of.</p> </li> </ul> <p>Example:</p> <pre><code># Create a sword usable by Fighters and Thieves\nusable_by = {CharacterClassType.FIGHTER, CharacterClassType.THIEF}\nitem = Item(\"Sword\", ItemType.WEAPON, usable_by, max_equipped=1, gp_value=10)\n</code></pre> <p>Don't call the methods on this class directory. Instead, use a PlayerCharacter's InventoryManager (pc.inventory) to add/remove this item to/from a PC's inventory or add it to a Quest.</p> <p>Parameters:</p> <ul> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>Name of the item.</p> </li> <li> <code>item_type</code>               (<code>ItemType</code>, default:                   <code>ITEM</code> )           \u2013            <p>Type of the item.</p> </li> <li> <code>usable_by_classes</code>               (<code>Set[CharacterClassType]</code>, default:                   <code>None</code> )           \u2013            <p>Classes that can use the item.</p> </li> <li> <code>max_equipped</code>               (<code>int</code>, default:                   <code>0</code> )           \u2013            <p>Max number that can be equipped. Defaults to 0.</p> </li> <li> <code>gp_value</code>               (<code>int</code>, default:                   <code>0</code> )           \u2013            <p>Value of the item in gold pieces (gp). Defaults to 0.</p> </li> <li> <code>quest</code>               (<code>Optional[Quest]</code>, default:                   <code>None</code> )           \u2013            <p>The quest that the item is a part of. Defaults to None.</p> </li> </ul>"},{"location":"reference/item/#osrlib.item.Item.is_equipable","title":"is_equipable  <code>property</code>","text":"<pre><code>is_equipable: bool\n</code></pre> <p>Whether the item is equipable by its owner.</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True if the item is usable by the owner's character class and at least one of the item can be</p> </li> <li> <code>bool</code>           \u2013            <p>equipped, otherwise False.</p> </li> </ul>"},{"location":"reference/item/#osrlib.item.Item.is_quest_piece","title":"is_quest_piece  <code>property</code>","text":"<pre><code>is_quest_piece: bool\n</code></pre> <p>Whether the item is a quest piece.</p> <p>This is a convenience property that checks whether the item's quest attribute is not None.</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True if the item is associated with a quest, otherwise False.</p> </li> </ul>"},{"location":"reference/item/#osrlib.item.Item.is_usable_by_owner","title":"is_usable_by_owner  <code>property</code>","text":"<pre><code>is_usable_by_owner: bool\n</code></pre> <p>Whether the item is usable by its owner.</p> <p>The item is usable if the owner is not None and the owning player character's class is in the set of classes in the item's usable_by_classes attribute. If the item is usable and also has a max_equipped value greater than 0, it can be equipped.</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True if the CharacterClassType of the owning PlayerCharacter can use the item, otherwise False.</p> </li> </ul>"},{"location":"reference/item/#osrlib.item.ItemAlreadyHasOwnerError","title":"ItemAlreadyHasOwnerError","text":"<p>               Bases: <code>Exception</code></p> <p>Exception raised when an item already has an owner.</p>"},{"location":"reference/item/#osrlib.item.ItemAlreadyInInventoryError","title":"ItemAlreadyInInventoryError","text":"<p>               Bases: <code>Exception</code></p> <p>Exception raised when trying to add an item to a player character's (PC) inventory already in the inventory.</p>"},{"location":"reference/item/#osrlib.item.ItemAlreadyInQuestError","title":"ItemAlreadyInQuestError","text":"<p>               Bases: <code>Exception</code></p> <p>Exception raised when trying to assign an item to a quest that's already been assigned to a quest.</p>"},{"location":"reference/item/#osrlib.item.ItemEquippedError","title":"ItemEquippedError","text":"<p>               Bases: <code>Exception</code></p> <p>Exception raised when trying to equip an item the player character (PC) already has equipped.</p>"},{"location":"reference/item/#osrlib.item.ItemNotEquippedError","title":"ItemNotEquippedError","text":"<p>               Bases: <code>Exception</code></p> <p>Exception raised when trying to unequip an item the player character (PC) doesn't have equipped.</p>"},{"location":"reference/item/#osrlib.item.ItemNotInInventoryError","title":"ItemNotInInventoryError","text":"<p>               Bases: <code>Exception</code></p> <p>Exception raised when trying to remove an item from a player character's (PC) inventory that's not in the inventory.</p>"},{"location":"reference/item/#osrlib.item.ItemNotUsableError","title":"ItemNotUsableError","text":"<p>               Bases: <code>Exception</code></p> <p>Exception raised when trying to use an item that the player character (PC) can't use.</p> <p>The inability to use an item is typically due to a character class restriction. For example, a magic user can't use a sword and a thief can't wear plate mail armor.</p>"},{"location":"reference/item/#osrlib.item.Spell","title":"Spell","text":"<pre><code>Spell(name: str, spell_level: int, damage_die: Optional[str] = None, range: Optional[int] = None, duration_turns: Optional[int] = None, **kwargs: dict[str, any])\n</code></pre> <p>               Bases: <code>Item</code></p> <p>Represents a spell item in the game.</p> <p>The Spell class extends the Item class to represent spells in the game. Spells have a level and may have a range, damage die, and duration. Unlike weapons, spells do not have a to-hit roll (they always hit if the spellcaster successfully cast the spell).</p> <p>Parameters:</p> <ul> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>The name of the spell.</p> </li> <li> <code>spell_level</code>               (<code>int</code>)           \u2013            <p>The level of the spell.</p> </li> <li> <code>damage_die</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>The damage roll for the spell. Defaults to None.</p> </li> <li> <code>range</code>               (<code>Optional[int]</code>, default:                   <code>None</code> )           \u2013            <p>The range of the spell in feet. Defaults to None for touch spells.</p> </li> <li> <code>duration_turns</code>               (<code>Optional[int]</code>, default:                   <code>None</code> )           \u2013            <p>The duration of the spell in turns (1 turn = 10 minutes). Defaults to                                       <code>None</code> for instantaneous spells.</p> </li> <li> <code>**kwargs</code>               (<code>dict[str, any]</code>, default:                   <code>{}</code> )           \u2013            <p>Arbitrary keyword arguments inherited from the <code>Item</code> class.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>spell_level</code>               (<code>int</code>)           \u2013            <p>The level of the spell.</p> </li> <li> <code>damage_die</code>               (<code>Optional[str]</code>)           \u2013            <p>The damage die for the spell, formatted like '1d8', '2d6', etc.</p> </li> <li> <code>range</code>               (<code>Optional[int]</code>)           \u2013            <p>The range of the spell in feet.</p> </li> <li> <code>duration_minutes</code>               (<code>Optional[int]</code>)           \u2013            <p>The duration of the spell in minutes. Defaults to None which indicates an                               instantaneous spell.</p> </li> </ul> <p>Example:</p> <pre><code># Create two spells, one of 3rd-level (fireball) and another of 6th-level (heal)\nfireball = Spell(name=\"Fireball\", spell_level=3, damage_die=\"8d6\", range=150, duration_minutes=None)\nheal = Spell(name=\"Heal\", spell_level=6, damage_die=None, range=None, duration_minutes=10)\n</code></pre>"},{"location":"reference/item/#osrlib.item.Weapon","title":"Weapon","text":"<pre><code>Weapon(name: str, to_hit_damage_die: str = '1d4', range: Optional[int] = None, **kwargs: dict[str, any])\n</code></pre> <p>               Bases: <code>Item</code></p> <p>Represents a weapon item in the game.</p> <p>The Weapon class extends the Item class to represent weapons in the game. It specifies damage die and may have a range indicating how far it can attack. Melee weapons typically have <code>None</code> as their range value.</p> <p>Parameters:</p> <ul> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>The name of the weapon.</p> </li> <li> <code>to_hit_damage_die</code>               (<code>str</code>, default:                   <code>'1d4'</code> )           \u2013            <p>The to-hit and damage roll for the weapon. Defaults to '1d4'.</p> </li> <li> <code>range</code>               (<code>Optional[int]</code>, default:                   <code>None</code> )           \u2013            <p>The range of the weapon in feet. Defaults to None for melee weapons.</p> </li> <li> <code>**kwargs</code>               (<code>dict[str, any]</code>, default:                   <code>{}</code> )           \u2013            <p>Arbitrary keyword arguments inherited from the <code>Item</code> class.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>damage_die</code>               (<code>str</code>)           \u2013            <p>The damage die for the weapon, formatted like '1d8', '2d4', '1d6+1', etc.</p> </li> <li> <code>range</code>               (<code>Optional[int]</code>)           \u2013            <p>The range of the weapon in feet.</p> </li> </ul> <p>Example:</p> <pre><code># Create a sword and a longbow +1\nsword = Weapon(name=\"Longsword\", to_hit_damage_die=\"1d8\")\nenchanted_bow = Weapon(name=\"Longbow of Accuracy\", to_hit_damage_die=\"1d8+1\", range=150)\n</code></pre>"},{"location":"reference/item_factories/","title":"item_factories","text":""},{"location":"reference/item_factories/#osrlib.item_factories","title":"item_factories","text":""},{"location":"reference/item_factories/#osrlib.item_factories.ArmorFactory","title":"ArmorFactory","text":"<p>Factory class to create Armor items.</p>"},{"location":"reference/item_factories/#osrlib.item_factories.EquipmentFactory","title":"EquipmentFactory","text":"<p>Factory class to create equipment items.</p>"},{"location":"reference/item_factories/#osrlib.item_factories.ItemDataNotFoundError","title":"ItemDataNotFoundError","text":"<pre><code>ItemDataNotFoundError(item_name)\n</code></pre> <p>               Bases: <code>Exception</code></p> <p>Raised when item data is not found.</p>"},{"location":"reference/item_factories/#osrlib.item_factories.WeaponFactory","title":"WeaponFactory","text":"<p>Factory class to create items of type <code>Weapon</code>.</p>"},{"location":"reference/item_factories/#osrlib.item_factories.equip_cleric","title":"equip_cleric","text":"<pre><code>equip_cleric(character: PlayerCharacter)\n</code></pre> <p>Equip a Cleric character with starting gear.</p>"},{"location":"reference/item_factories/#osrlib.item_factories.equip_dwarf","title":"equip_dwarf","text":"<pre><code>equip_dwarf(character: PlayerCharacter)\n</code></pre> <p>Equip a Dwarf character with starting gear.</p>"},{"location":"reference/item_factories/#osrlib.item_factories.equip_elf","title":"equip_elf","text":"<pre><code>equip_elf(character: PlayerCharacter)\n</code></pre> <p>Equip an Elf character with starting gear.</p>"},{"location":"reference/item_factories/#osrlib.item_factories.equip_fighter","title":"equip_fighter","text":"<pre><code>equip_fighter(character: PlayerCharacter)\n</code></pre> <p>Equip a Fighter character with starting gear.</p>"},{"location":"reference/item_factories/#osrlib.item_factories.equip_halfling","title":"equip_halfling","text":"<pre><code>equip_halfling(character: PlayerCharacter)\n</code></pre> <p>Equip a Halfling character with starting gear.</p>"},{"location":"reference/item_factories/#osrlib.item_factories.equip_magic_user","title":"equip_magic_user","text":"<pre><code>equip_magic_user(character: PlayerCharacter)\n</code></pre> <p>Equip a Magic User character with starting gear.</p>"},{"location":"reference/item_factories/#osrlib.item_factories.equip_party","title":"equip_party","text":"<pre><code>equip_party(party: Party)\n</code></pre> <p>Equip a party with default starting gear based on their character classes.</p>"},{"location":"reference/item_factories/#osrlib.item_factories.equip_thief","title":"equip_thief","text":"<pre><code>equip_thief(character: PlayerCharacter)\n</code></pre> <p>Equip a Thief character with starting gear.</p>"},{"location":"reference/item_factories/#osrlib.item_factories.get_random_item","title":"get_random_item","text":"<pre><code>get_random_item(item_type: ItemType, magical: bool = False) -&gt; Item\n</code></pre> <p>Gets a randomn (optionally magic) item from the given category.</p> <p>Parameters:</p> <ul> <li> <code>item_type</code>               (<code>ItemType</code>)           \u2013            <p>The category of item to get.</p> </li> <li> <code>magical</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to get a magical version of the item.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Item</code> (              <code>Item</code> )          \u2013            <p>An instance of the selected item.</p> </li> </ul>"},{"location":"reference/monster/","title":"monster","text":""},{"location":"reference/monster/#osrlib.monster","title":"monster","text":""},{"location":"reference/monster/#osrlib.monster.Monster","title":"Monster","text":"<pre><code>Monster(monster_stats: MonsterStatsBlock)\n</code></pre> <p>A Monster is a creature the party can encounter in a dungeon and defeat to obtain experience points and optionally treasure and quest pieces.</p>"},{"location":"reference/monster/#osrlib.monster.Monster.is_alive","title":"is_alive  <code>property</code>","text":"<pre><code>is_alive\n</code></pre> <p>Gets whether the monster is alive.</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p><code>True</code> if the monster has more than 0 hit points, otherwise <code>False</code>.</p> </li> </ul>"},{"location":"reference/monster/#osrlib.monster.Monster.apply_damage","title":"apply_damage","text":"<pre><code>apply_damage(hit_points_damage: int)\n</code></pre> <p>Apply damage to the monster by reducing the monster's hit points by the given amount, down to a minimum of 0.</p> <p>This method has no affect if the monster is already dead.</p> <p>Parameters:</p> <ul> <li> <code>hit_points_damage</code>               (<code>int</code>)           \u2013            <p>The amount of damage done to the monster.</p> </li> </ul>"},{"location":"reference/monster/#osrlib.monster.Monster.get_attack_rolls","title":"get_attack_rolls","text":"<pre><code>get_attack_rolls() -&gt; List[DiceRoll]\n</code></pre> <p>Roll a 1d20 for each attack this monster has per round and return the collection of rolls.</p>"},{"location":"reference/monster/#osrlib.monster.Monster.get_damage_roll","title":"get_damage_roll","text":"<pre><code>get_damage_roll() -&gt; DiceRoll\n</code></pre> <p>Roll the monster's damage dice and return the total.</p>"},{"location":"reference/monster/#osrlib.monster.Monster.get_initiative_roll","title":"get_initiative_roll","text":"<pre><code>get_initiative_roll()\n</code></pre> <p>Rolls a 1d6 and returns the total for the monster's initiative.</p>"},{"location":"reference/monster/#osrlib.monster.Monster.get_to_hit_target_ac","title":"get_to_hit_target_ac","text":"<pre><code>get_to_hit_target_ac(target_ac: int) -&gt; int\n</code></pre> <p>Get the to-hit roll needed to hit a target with the given armor class.</p>"},{"location":"reference/monster/#osrlib.monster.Monster.heal","title":"heal","text":"<pre><code>heal(hit_points_healed: int)\n</code></pre> <p>Heal the monster by restoring the given amount of hit points up to the monster's maximum hit points.</p> <p>This method has no affect if the monster is dead.</p> <p>Parameters:</p> <ul> <li> <code>hit_points_healed</code>               (<code>int</code>)           \u2013            <p>The amount of hit points to restore.</p> </li> </ul>"},{"location":"reference/monster/#osrlib.monster.MonsterParty","title":"MonsterParty","text":"<pre><code>MonsterParty(monster_stats_block: MonsterStatsBlock, monster_group_treasure_type: TreasureType = TreasureType.NONE)\n</code></pre> <p>A group of monsters the party can encounter in a dungeon location.</p> <p>Attributes:</p> <ul> <li> <code>members</code>               (<code>list</code>)           \u2013            <p>A list of the monsters in the monster party.</p> </li> <li> <code>is_alive</code>               (<code>bool</code>)           \u2013            <p>True if at least one monster in the monster party is alive, otherwise False.</p> </li> <li> <code>treasure</code>               (<code>Treasure</code>)           \u2013            <p>The treasure owned by the group of monsters (collectively). This treasure is in addition to                  any treasure owned by the individuals in the monster party.</p> </li> </ul> <p>The number of monsters that comprise the monster party, as well as hit points, armor class, and other statistics are determined by the given MonsterStatsBlock.</p> <p>Parameters:</p> <ul> <li> <code>monster_stats_block</code>               (<code>MonsterStatsBlock</code>)           \u2013            <p>The stat block for the monsters in the party.</p> </li> <li> <code>monster_group_treasure_type</code>               (<code>(TreasureType, Optional)</code>, default:                   <code>NONE</code> )           \u2013            <p>The group treasure type for the monster party.</p> </li> </ul>"},{"location":"reference/monster/#osrlib.monster.MonsterParty.is_alive","title":"is_alive  <code>property</code>","text":"<pre><code>is_alive: bool\n</code></pre> <p>Get whether the monster party is alive.</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p><code>True</code> if at least one monster in the party has more than 0 hit points, otherwise <code>False</code>.</p> </li> </ul>"},{"location":"reference/monster/#osrlib.monster.MonsterParty.xp_value","title":"xp_value  <code>property</code>","text":"<pre><code>xp_value: int\n</code></pre> <p>The total experience points (XP) to award for defeating the monsters in the party.</p> <p>The total XP is the sum of:</p> <ul> <li>Experience points for all monsters in the party, including the GP value of treasure owned by individuals.</li> <li>GP value of the <code>treasure</code> owned or guarded by the party as a group.</li> </ul>"},{"location":"reference/monster/#osrlib.monster.MonsterParty.from_dict","title":"from_dict  <code>classmethod</code>","text":"<pre><code>from_dict(monster_stats_block_dict: dict) -&gt; MonsterParty\n</code></pre> <p>Create a MonsterParty instance from a dictionary representing a MonsterStatsBlock.</p> <p>This class method deserializes a dictionary into a MonsterStatsBlock instance and then uses it to initialize a new MonsterParty. It's particularly useful for rehydrating a MonsterParty from its serialized state, such as when loading game data from a persistent storage like a database or a file.</p> <p>Parameters:</p> <ul> <li> <code>monster_stats_block_dict</code>               (<code>dict</code>)           \u2013            <p>A dictionary containing key-value pairs representing the attributes of a                              MonsterStatsBlock. The dictionary structure should correspond to the output                              of the <code>to_dict</code> method of a MonsterStatsBlock instance.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>MonsterParty</code> (              <code>MonsterParty</code> )          \u2013            <p>An instance of MonsterParty initialized with the MonsterStatsBlock created from the provided           dictionary.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>             \u2013            <p>If the dictionary does not contain the necessary information to create a valid MonsterStatsBlock.</p> </li> <li> <code>KeyError</code>             \u2013            <p>If essential keys are missing in the input dictionary.</p> </li> </ul> Example <p>monster_party = MonsterParty(monster_stats_block) monster_party_dict = monster_party.to_dict() rehydrated_monster_party = MonsterParty.from_dict(monster_party_dict) print(rehydrated_monster_party)</p> Note <p>This method is designed to work with dictionaries generated by the <code>to_dict</code> method of a MonsterParty instance. Manually creating or altering the dictionary may lead to unexpected behavior.</p>"},{"location":"reference/monster/#osrlib.monster.MonsterParty.get_surprise_roll","title":"get_surprise_roll","text":"<pre><code>get_surprise_roll() -&gt; int\n</code></pre> <p>Rolls a 1d6 and returns the total for the monster party's surprise roll.</p>"},{"location":"reference/monster/#osrlib.monster.MonsterParty.to_dict","title":"to_dict","text":"<pre><code>to_dict() -&gt; dict[str, any]\n</code></pre> <p>Return a dictionary representation of the monster party's MonsterStatsBlock.</p> <p>This method serializes the MonsterStatsBlock instance associated with the MonsterParty into a dictionary format. The primary use case for this method is to facilitate saving the state of a MonsterParty to a persistent storage (like a database or a file) by first converting it to a dictionary. The serialized dictionary can then be used to rehydrate a MonsterParty instance using the <code>from_dict</code> class method.</p> <p>Returns:</p> <ul> <li> <code>dict[str, any]</code>           \u2013            <p>dict[str, any]: A dictionary representation of the MonsterStatsBlock associated with the MonsterParty. This dictionary contains key-value pairs representing the attributes of the MonsterStatsBlock, such as 'name', 'armor_class', 'hit_dice', etc.</p> </li> </ul> Example <p>monster_party = MonsterParty(monster_stats_block) monster_party_dict = monster_party.to_dict()</p> Note <p>This method does not serialize the dynamic state of the MonsterParty itself (such as the current health of monsters or their treasure. It serializes the MonsterStatsBlock, which can be used to recreate a similar MonsterParty with a new state.</p>"},{"location":"reference/monster/#osrlib.monster.MonsterParty.to_dict--the-monster_party_dict-can-now-be-used-to-store-the-state-of-the-monsterparty","title":"The monster_party_dict can now be used to store the state of the MonsterParty","text":""},{"location":"reference/monster/#osrlib.monster.MonsterParty.to_dict--and-later-to-recreate-it-using-monsterpartyfrom_dictmonster_party_dict","title":"and later to recreate it using MonsterParty.from_dict(monster_party_dict)","text":""},{"location":"reference/monster/#osrlib.monster.MonsterStatsBlock","title":"MonsterStatsBlock","text":"<pre><code>MonsterStatsBlock(name: str, description: str = '', armor_class: int = 10, hit_dice: str = '1d8', movement: int = 120, num_special_abilities=0, attacks_per_round=1, damage_per_attack='1d4', num_appearing='1d6', save_as_class=CharacterClassType.FIGHTER, save_as_level=1, morale: int = 12, treasure_type=TreasureType.NONE, alignment=Alignment.NEUTRAL)\n</code></pre> <p>Represents the statistical attributes of a monster like those found in an RPG rulebook.</p> <p>This class encapsulates all key statistics for a monster like armor class, hit dice, movement rate, and other attributes typically found in a monster's stat block. These attributes define the combat and behavioral characteristics of monsters encountered by the characters in the player's party.</p> <p>The primary use of a MonsterStatsBlock is as a parameter for the MonsterParty constructor. It allows the creation of a MonsterParty instance, which creates instances of the monster in the party as defined by the statistics provided in the MonsterStatsBlock.</p> <p>The 'num_appearing' parameter accepts a dice notation like '1d6' or '2d4', which is rolled on instantiation to determine the actual number of monsters appearing. To specify a set number of monsters that should appear, specify a string representation of an integer, like '1', '8', or '100'.</p> <p>Example: <pre><code>    # Create a MonsterStatsBlock for a Goblin\n    goblin_stats = MonsterStatsBlock(\n        name=\"Goblin\",\n        description=\"A small, green-skinned humanoid with a mischievous and malevolent nature.\",\n        armor_class=6,\n        hit_dice=\"1d8\",\n        movement=30,\n        num_special_abilities=0,\n        attacks_per_round=1,\n        damage_per_attack=\"1d6\",\n        num_appearing=\"2d4\",\n        save_as_class=CharacterClassType.FIGHTER,\n        save_as_level=1,\n        morale=8,\n        treasure_type=TreasureType.NONE,\n        alignment=Alignment.EVIL\n    )\n\n    # Use the goblin_stats to create a MonsterParty\n    goblin_party = MonsterParty(goblin_stats)\n    print(f\"Goblin Party: {goblin_party}\")\n</code></pre></p> <p>Attributes:</p> <ul> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>The name of the monster.</p> </li> <li> <code>description</code>               (<code>str</code>)           \u2013            <p>A brief description of the monster.</p> </li> <li> <code>armor_class</code>               (<code>int</code>)           \u2013            <p>The armor class (AC) of the monster, indicating its defensive capabilities.</p> </li> <li> <code>hit_dice</code>               (<code>str</code>)           \u2013            <p>The hit dice of the monster, in 'nd8' or 'nd8+n' format, representing its health pool.</p> </li> <li> <code>movement</code>               (<code>int</code>)           \u2013            <p>The movement rate of the monster in feet per round.</p> </li> <li> <code>num_special_abilities</code>               (<code>int</code>)           \u2013            <p>The number of special abilities the monster possesses.</p> </li> <li> <code>attacks_per_round</code>               (<code>int</code>)           \u2013            <p>The number of attacks the monster can perform in a single round.</p> </li> <li> <code>damage_per_attack</code>               (<code>str</code>)           \u2013            <p>The damage dealt by the monster per attack, in 'ndn' or 'ndn+n' format.</p> </li> <li> <code>num_appearing</code>               (<code>str</code>)           \u2013            <p>The dice notation to roll or str(int) of the number of these monsters that should appear.</p> </li> <li> <code>save_as_class</code>               (<code>CharacterClassType</code>)           \u2013            <p>The class type for the monster's saving throws.</p> </li> <li> <code>save_as_level</code>               (<code>int</code>)           \u2013            <p>The effective level for the monster's saving throws.</p> </li> <li> <code>morale</code>               (<code>int</code>)           \u2013            <p>The morale rating of the monster, influencing its behavior in combat.</p> </li> <li> <code>treasure_type</code>               (<code>(TreasureType, Optional)</code>)           \u2013            <p>The type of treasure carried or guarded by the monster.</p> </li> <li> <code>alignment</code>               (<code>Alignment</code>)           \u2013            <p>The moral and ethical stance of the monster.</p> </li> </ul>"},{"location":"reference/monster/#osrlib.monster.MonsterStatsBlock.from_dict","title":"from_dict  <code>classmethod</code>","text":"<pre><code>from_dict(monster_stats_block_dict: dict) -&gt; MonsterStatsBlock\n</code></pre> <p>Deserialize a dictionary into a MonsterStatsBlock instance.</p> <p>This method creates a new instance of MonsterStatsBlock using the data provided in a dictionary, typically generated by the <code>to_dict</code> method. It ensures that enum values are appropriately converted back to their respective enum types.</p> <p>Parameters:</p> <ul> <li> <code>monster_stats_block_dict</code>               (<code>dict</code>)           \u2013            <p>A dictionary containing the monster's attributes.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>MonsterStatsBlock</code> (              <code>MonsterStatsBlock</code> )          \u2013            <p>An instance of MonsterStatsBlock initialized with the data from the dictionary.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>KeyError</code>             \u2013            <p>If required keys are missing in the dictionary.</p> </li> <li> <code>ValueError</code>             \u2013            <p>If there are issues with enum conversion or invalid data.</p> </li> </ul> Note <p>This method is intended for use with dictionaries created by the <code>to_dict</code> method of a MonsterStatsBlock instance.</p>"},{"location":"reference/monster/#osrlib.monster.MonsterStatsBlock.to_dict","title":"to_dict","text":"<pre><code>to_dict() -&gt; dict[str, any]\n</code></pre> <p>Serialize the MonsterStatsBlock instance to a dictionary format.</p> <p>Converts the MonsterStatsBlock's attributes into a dictionary, facilitating easy serialization for storage or transmission. Enum values (like save_as_class) are converted to their string representations for compatibility.</p> <p>Returns:</p> <ul> <li> <code>dict[str, any]</code>           \u2013            <p>dict[str, any]: A dictionary representation of the MonsterStatsBlock instance.</p> </li> </ul>"},{"location":"reference/monster_manual/","title":"monster_manual","text":""},{"location":"reference/monster_manual/#osrlib.monster_manual","title":"monster_manual","text":""},{"location":"reference/party/","title":"party","text":""},{"location":"reference/party/#osrlib.party","title":"party","text":"<p>The party module contains the Party class and functions related to managing a party of player characters (collection of PlayerCharacter).</p>"},{"location":"reference/party/#osrlib.party.CharacterAlreadyInPartyError","title":"CharacterAlreadyInPartyError","text":"<p>               Bases: <code>Exception</code></p> <p>Raised when attempting to add a player character to a party that already has that character as a member.</p> <p>Example: <pre><code># Check whether the character is in the party before adding them\nif not party.is_member(some_new_character):\n    party.add_character(some_new_character)\n</code></pre></p>"},{"location":"reference/party/#osrlib.party.CharacterNotInPartyError","title":"CharacterNotInPartyError","text":"<p>               Bases: <code>Exception</code></p> <p>Raised when attempting to remove a character from a party when that character isn't in the party.</p> <p>Example: <pre><code># Check for membership before removing a character from the party\nif party.is_member(character):\n    party.remove_character(character)\n</code></pre></p>"},{"location":"reference/party/#osrlib.party.NoMembersInPartyError","title":"NoMembersInPartyError","text":"<p>               Bases: <code>Exception</code></p> <p>Raised when attempting an operation on a party member when the party has no members.</p>"},{"location":"reference/party/#osrlib.party.Party","title":"Party","text":"<pre><code>Party(name: str, max_party_members: int = 8, characters: List[PlayerCharacter] = None)\n</code></pre> <p>Manages a collection of player characters (PCs) that comprise an adventuring party.</p> <p>If the party has been added to an adventure and the adventure has been started, you can't modify the party roster by adding or removing characters.</p> <p>Parameters:</p> <ul> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>The name of the party.</p> </li> <li> <code>max_party_members</code>               (<code>int</code>, default:                   <code>8</code> )           \u2013            <p>The maximum number of characters allowed in the party.</p> </li> <li> <code>characters</code>               (<code>List[PlayerCharacter]</code>, default:                   <code>None</code> )           \u2013            <p>The characters in the party.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>The name of the party.</p> </li> <li> <code>max_party_members</code>               (<code>int</code>)           \u2013            <p>The maximum number of characters allowed in the party.</p> </li> <li> <code>characters</code>               (<code>List[PlayerCharacter]</code>)           \u2013            <p>The characters in the party.</p> </li> <li> <code>active_character</code>               (<code>PlayerCharacter</code>)           \u2013            <p>The currently active, or selected, character in the party.</p> </li> <li> <code>is_adventuring</code>               (<code>bool</code>)           \u2013            <p>Whether the party has been added to an Adventure that has been started.</p> </li> <li> <code>current_adventure</code>               (<code>Adventure</code>)           \u2013            <p>The adventure the party is currently in, or None if the party is not in an                            adventure.</p> </li> </ul>"},{"location":"reference/party/#osrlib.party.Party.is_adventuring","title":"is_adventuring  <code>property</code>","text":"<pre><code>is_adventuring: bool\n</code></pre> <p>Returns True if the party has been added to an adventure that has been started.</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True if the party has been added to an adventure that has been started.</p> </li> </ul>"},{"location":"reference/party/#osrlib.party.Party.is_alive","title":"is_alive  <code>property</code>","text":"<pre><code>is_alive: bool\n</code></pre> <p>Returns True if any character in the party is alive.</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True if any character in the party is alive.</p> </li> </ul>"},{"location":"reference/party/#osrlib.party.Party.num_characters","title":"num_characters  <code>property</code>","text":"<pre><code>num_characters: int\n</code></pre> <p>Get the number of characters in the party.</p> <p>Returns:</p> <ul> <li> <code>int</code> (              <code>int</code> )          \u2013            <p>The number of characters in the party.</p> </li> </ul>"},{"location":"reference/party/#osrlib.party.Party.add_character","title":"add_character","text":"<pre><code>add_character(character: PlayerCharacter, set_as_active_character: bool = True) -&gt; PlayerCharacter\n</code></pre> <p>Add a character to the party.</p> <p>A character can be added to a party only once, and a party has a maximum number of characters.</p> <p>Example:</p> <pre><code># Add a character to a party and allow them to be set as the active character\nfighter = PlayerCharacter(\"Sckricko\", character_classes.CharacterClassType.FIGHTER, 1)\nthief = PlayerCharacter(\"Slick\", character_classes.CharacterClassType.THIEF, 1)\nparty.add_character(fighter) # sets the character as active for the party character by default\nparty.add_character(thief, set_as_active_character=False) # don't set the character as active for the party\n\nif party.active_character == fighter:\n    print(f\"Character '{character.name}' is the active character in the party.\")\n</code></pre> <p>Parameters:</p> <ul> <li> <code>character</code>               (<code>PlayerCharacter</code>)           \u2013            <p>The PC to add to the party.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>CharacterAlreadyInPartyError</code>             \u2013            <p>If the character is already in the party.</p> </li> <li> <code>PartyAtCapacityError</code>             \u2013            <p>If the party already has the maximum number of characters.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>PlayerCharacter</code> (              <code>PlayerCharacter</code> )          \u2013            <p>The character that was added to the party.</p> </li> </ul>"},{"location":"reference/party/#osrlib.party.Party.clear_party","title":"clear_party","text":"<pre><code>clear_party()\n</code></pre> <p>Removes all characters from the party.</p>"},{"location":"reference/party/#osrlib.party.Party.create_character","title":"create_character","text":"<pre><code>create_character(name: str, character_class: CharacterClassType, level: int = 1) -&gt; PlayerCharacter\n</code></pre> <p>Initialize a new character, add them to the party, set as the active character for the party, and return the character.</p> <p>Example:</p> <pre><code># Create a new character and add them to the party\nparty.create_character(\"Sckricko\", character_classes.CharacterClassType.FIGHTER, 1)\n</code></pre> <p>Parameters:</p> <ul> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>The name of the character.</p> </li> <li> <code>character_class</code>               (<code>CharacterClassType</code>)           \u2013            <p>The character's class.</p> </li> <li> <code>level</code>               (<code>int</code>, default:                   <code>1</code> )           \u2013            <p>The character's level. Defaults to 1.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>PlayerCharacter</code> (              <code>PlayerCharacter</code> )          \u2013            <p>The character that was created and added to the party.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>PartyInStartedAdventureError</code>             \u2013            <p>If the party is already adventuring, can't create a new character in the party.</p> </li> </ul>"},{"location":"reference/party/#osrlib.party.Party.from_dict","title":"from_dict  <code>classmethod</code>","text":"<pre><code>from_dict(party_dict: dict) -&gt; Party\n</code></pre> <p>Deserializes a dictionary representation of an <code>Exit</code> object. Typically done after getting the dictionary from persistent storage.</p>"},{"location":"reference/party/#osrlib.party.Party.get_character_by_index","title":"get_character_by_index","text":"<pre><code>get_character_by_index(index: int) -&gt; PlayerCharacter\n</code></pre> <p>Get a character from the party by index, or None if there's no character at that index.</p> <p>Example: <pre><code>if len(party.members) &gt; 0:\n    # Get the first character in the party\n    first_character = party.get_character_by_index(0)\n\n    # Get the last character in the party\n    last_character = party.get_character_by_index(-1)\n</code></pre></p> <p>Parameters:</p> <ul> <li> <code>index</code>               (<code>int</code>)           \u2013            <p>The index of the character to return.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>PlayerCharacter</code> (              <code>PlayerCharacter</code> )          \u2013            <p>The character with the given index, or None if the index is out of range.</p> </li> </ul>"},{"location":"reference/party/#osrlib.party.Party.get_character_by_name","title":"get_character_by_name","text":"<pre><code>get_character_by_name(name: str) -&gt; PlayerCharacter\n</code></pre> <p>Get a character from the party by name or None if the character is not in the party.</p> <p>Example: <pre><code>character = party.get_character_by_name(\"Sckricko\")\nif character is not None:\n    print(f\"Character '{character.name}' has {character.hit_points} hit points.\")\n</code></pre></p> <p>Parameters:</p> <ul> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>The name of the character to return.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>PlayerCharacter</code> (              <code>PlayerCharacter</code> )          \u2013            <p>The character with the given name or None if the character is not in the party.</p> </li> </ul>"},{"location":"reference/party/#osrlib.party.Party.get_character_index","title":"get_character_index","text":"<pre><code>get_character_index(character: PlayerCharacter) -&gt; int\n</code></pre> <p>Get the index of a character in the party.</p> <p>Example:</p> <p>Get the index of a character in the party without checking whether the character is in the party (not recommended):</p> <pre><code>character = party.get_character_by_name(\"Sckricko\")\nif party.is_member(character):\n    index = party.get_character_index(character)\n    print(f\"Character '{character.name}' is number {index + 1} in the party's marching order.\")\n</code></pre> <p>Parameters:</p> <ul> <li> <code>character</code>               (<code>PlayerCharacter</code>)           \u2013            <p>The character to get the index of</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code> (              <code>int</code> )          \u2013            <p>The index of the character in the party.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>CharacterNotInPartyError</code>             \u2013            <p>If the character is not in the party.</p> </li> </ul>"},{"location":"reference/party/#osrlib.party.Party.get_characters_by_class","title":"get_characters_by_class","text":"<pre><code>get_characters_by_class(character_class_type: CharacterClassType) -&gt; List[PlayerCharacter]\n</code></pre> <p>Get all characters in the party of the given class.</p> <p>Example: <pre><code>fighters = party.get_characters_by_class(character_classes.CharacterClassType.FIGHTER)\nfor fighter in fighters:\n    print(fighter.name)\n</code></pre></p> <p>Parameters:</p> <ul> <li> <code>character_class_type</code>               (<code>CharacterClassType</code>)           \u2013            <p>The class of characters to return.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>List[PlayerCharacter]</code>           \u2013            <p>List[PlayerCharacter]: A list of all characters in the party of the given class.</p> </li> </ul>"},{"location":"reference/party/#osrlib.party.Party.get_default_party","title":"get_default_party  <code>staticmethod</code>","text":"<pre><code>get_default_party(party_name: str = 'Default Party') -&gt; Party\n</code></pre> <p>Get a party of first-level characters of each class: a Fighter, Elf, Cleric, Dwarf, Thief, Halfling, and Magic User.</p> <p>Returns:</p> <ul> <li> <code>Party</code> (              <code>Party</code> )          \u2013            <p>A party of first-level player characters in each character class.</p> </li> </ul>"},{"location":"reference/party/#osrlib.party.Party.get_living_members","title":"get_living_members","text":"<pre><code>get_living_members() -&gt; List[PlayerCharacter]\n</code></pre> <p>Returns a list of all living members of the party.</p> <p>Returns:</p> <ul> <li> <code>List[PlayerCharacter]</code>           \u2013            <p>List[PlayerCharacter]: A list of all living members of the party.</p> </li> </ul>"},{"location":"reference/party/#osrlib.party.Party.get_surprise_roll","title":"get_surprise_roll","text":"<pre><code>get_surprise_roll() -&gt; int\n</code></pre> <p>Rolls a 1d6 and returns the result for the party's surprise roll.</p>"},{"location":"reference/party/#osrlib.party.Party.grant_xp","title":"grant_xp","text":"<pre><code>grant_xp(xp: int)\n</code></pre> <p>Divide and award experience points to the living characters in the party.</p> <p>Example: <pre><code># Award experience points to the\n# living characters in the party\nparty.award_xp(100)\n</code></pre></p> <p>Parameters:</p> <ul> <li> <code>xp</code>               (<code>int</code>)           \u2013            <p>The number of experience points to award to each character in the party.</p> </li> </ul>"},{"location":"reference/party/#osrlib.party.Party.heal_party","title":"heal_party","text":"<pre><code>heal_party()\n</code></pre> <p>Heal all characters in the party to their maximum hit points.</p>"},{"location":"reference/party/#osrlib.party.Party.is_member","title":"is_member","text":"<pre><code>is_member(character: PlayerCharacter) -&gt; bool\n</code></pre> <p>Returns <code>True</code> if the character is in the party.</p> <p>Example:</p> <pre><code># Check whether a character is in the party\nif party.is_member(some_player_character):\n    print(f\"{some_name} is in the party.\")\nelse:\n    print(f\"{some_name} is not in the party.\")\n</code></pre> <p>Parameters:</p> <ul> <li> <code>character</code>               (<code>PlayerCharacter</code>)           \u2013            <p>The character to check for.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p><code>True</code> if the character is in the party, otherwise <code>False</code>.</p> </li> </ul>"},{"location":"reference/party/#osrlib.party.Party.move_character_to_index","title":"move_character_to_index","text":"<pre><code>move_character_to_index(character: PlayerCharacter, index: int)\n</code></pre> <p>Moves a character to a new slot in the in party's marching order.</p> <p>Use this method to adjust the marching order of the party.</p> <p>Example:</p> <pre><code># Move a character from fourth in line (index 3) to the\n# front of the party at index 0.\ncharacter = party.get_character_by_name(\"Sckricko\")\nif party.is_member(character):\n    party.move_character_to_index(character, 0)\n</code></pre> <p>Parameters:</p> <ul> <li> <code>character</code>               (<code>PlayerCharacter</code>)           \u2013            <p>The character to move.</p> </li> <li> <code>index</code>               (<code>int</code>)           \u2013            <p>The index to move the character to.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>CharacterNotInPartyError</code>             \u2013            <p>If the character is not in the party.</p> </li> <li> <code>IndexError</code>             \u2013            <p>If the index is out of range.</p> </li> </ul>"},{"location":"reference/party/#osrlib.party.Party.remove_character","title":"remove_character","text":"<pre><code>remove_character(character: PlayerCharacter)\n</code></pre> <p>Removes a character from the party and sets the next character in the party as active.</p> <p>If the character is the last in the party, the party's active character is set to None.</p> <p>Example: <pre><code>try:\n    party.remove_character(character)\nexcept CharacterNotInPartyError:\n    print(f\"Character '{character.name}' wasn't in the party and thus couldn't be removed from it.\")\n</code></pre></p> <p>Parameters:</p> <ul> <li> <code>character</code>               (<code>PlayerCharacter</code>)           \u2013            <p>The PC to remove from the party.</p> </li> </ul>"},{"location":"reference/party/#osrlib.party.Party.set_active_character","title":"set_active_character","text":"<pre><code>set_active_character(character: PlayerCharacter)\n</code></pre> <p>Sets the given character as the active, or \"selected,\" character in the party.</p> <p>The character must be a member of the party before you can set them as the active character.</p> <p>Parameters:</p> <ul> <li> <code>character</code>               (<code>PlayerCharacter</code>)           \u2013            <p>The party member to set as the active or currently selected character.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>CharacterNotInPartyError</code>             \u2013            <p>Raised if the character is not in the party.</p> </li> </ul>"},{"location":"reference/party/#osrlib.party.Party.set_next_character_as_active","title":"set_next_character_as_active","text":"<pre><code>set_next_character_as_active()\n</code></pre> <p>Set the next character in the party as active.</p> <p>If the party has no members, the active character is set to None.</p> <p>Example: <pre><code>party.set_next_character_as_active()\n</code></pre></p>"},{"location":"reference/party/#osrlib.party.Party.to_dict","title":"to_dict","text":"<pre><code>to_dict() -&gt; dict\n</code></pre> <p>Serializes the <code>Party</code> to a dictionary, typically in preparation for writing it to persistent storage in a downstream operation.</p>"},{"location":"reference/party/#osrlib.party.PartyAtCapacityError","title":"PartyAtCapacityError","text":"<p>               Bases: <code>Exception</code></p> <p>Raised when attempting to add a player character to a party that already has the maximum number of members.</p>"},{"location":"reference/party/#osrlib.party.PartyInStartedAdventureError","title":"PartyInStartedAdventureError","text":"<p>               Bases: <code>Exception</code></p> <p>Raised when attempting to modify a party's roster when the party is in an adventure that's already been started.</p>"},{"location":"reference/player_character/","title":"player_character","text":""},{"location":"reference/player_character/#osrlib.player_character","title":"player_character","text":"<p>Module containing the PlayerCharacter class. Use PlayerCharacter to represent a PC the player adds to their party.</p>"},{"location":"reference/player_character/#osrlib.player_character.Alignment","title":"Alignment","text":"<p>               Bases: <code>Enum</code></p> <p>Represents the alignment of a player character (PC) or monster.</p>"},{"location":"reference/player_character/#osrlib.player_character.PlayerCharacter","title":"PlayerCharacter","text":"<pre><code>PlayerCharacter(name: str, character_class_type: CharacterClassType, level: int = 1, xp_adjustment_percentage: int = 0)\n</code></pre> <p>Represents a player character (PC) in the game.</p> <p>Attributes:</p> <ul> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>The name of the character.</p> </li> <li> <code>abilities</code>               (<code>dict</code>)           \u2013            <p>A dictionary of the character's abilities.</p> </li> <li> <code>character_class</code>               (<code>CharacterClass</code>)           \u2013            <p>The character's class.</p> </li> <li> <code>inventory</code>               (<code>Inventory</code>)           \u2013            <p>The character's inventory.</p> </li> <li> <code>xp_adjustment_percentage</code>               (<code>int</code>)           \u2013            <p>The character's XP adjustment based on the scores of ability their prime                             requisite(s). This value is set when the character's class is set, or when                             restoring a saved character.</p> </li> </ul>"},{"location":"reference/player_character/#osrlib.player_character.PlayerCharacter.armor_class","title":"armor_class  <code>property</code>","text":"<pre><code>armor_class\n</code></pre> <p>Get the armor class of the character.</p>"},{"location":"reference/player_character/#osrlib.player_character.PlayerCharacter.is_alive","title":"is_alive  <code>property</code>","text":"<pre><code>is_alive: bool\n</code></pre> <p>Returns True if the character is alive.</p> <p>The character is considered alive if their hit points are greater than 0.</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True if the character is alive (hit points &gt; 0), False otherwise.</p> </li> </ul>"},{"location":"reference/player_character/#osrlib.player_character.PlayerCharacter.max_hit_points","title":"max_hit_points  <code>property</code>","text":"<pre><code>max_hit_points: int\n</code></pre> <p>Get the maximum hit points of the character.</p>"},{"location":"reference/player_character/#osrlib.player_character.PlayerCharacter.xp","title":"xp  <code>property</code>","text":"<pre><code>xp: int\n</code></pre> <p>Get the character's current XP total.</p>"},{"location":"reference/player_character/#osrlib.player_character.PlayerCharacter.xp_needed_for_next_level","title":"xp_needed_for_next_level  <code>property</code>","text":"<pre><code>xp_needed_for_next_level: int\n</code></pre> <p>Get the amount of XP needed for the character to reach the next level.</p>"},{"location":"reference/player_character/#osrlib.player_character.PlayerCharacter.apply_damage","title":"apply_damage","text":"<pre><code>apply_damage(hit_points_damage: int)\n</code></pre> <p>Apply damage to the player character by reducing their hit points by the given amount, down to a minimum of 0.</p> <p>This method has no affect if the character is already dead.</p> <p>Parameters:</p> <ul> <li> <code>hit_points_damage</code>               (<code>int</code>)           \u2013            <p>The amount of damage done to the PC.</p> </li> </ul>"},{"location":"reference/player_character/#osrlib.player_character.PlayerCharacter.get_ability_roll","title":"get_ability_roll","text":"<pre><code>get_ability_roll()\n</code></pre> <p>Rolls a 4d6 and returns the sum of the three highest rolls.</p>"},{"location":"reference/player_character/#osrlib.player_character.PlayerCharacter.get_attack_roll","title":"get_attack_roll","text":"<pre><code>get_attack_roll() -&gt; DiceRoll\n</code></pre> <p>Roll a 1d20 to hit, add all applicable modifiers, and return the roll.</p> <p>Returns:</p> <ul> <li> <code>DiceRoll</code> (              <code>DiceRoll</code> )          \u2013            <p>The result of the to hit roll.</p> </li> </ul>"},{"location":"reference/player_character/#osrlib.player_character.PlayerCharacter.get_damage_roll","title":"get_damage_roll","text":"<pre><code>get_damage_roll() -&gt; DiceRoll\n</code></pre> <p>Roll appropriate damage die, add all applicable modifiers, and return the roll.</p> <p>Returns:</p> <ul> <li> <code>DiceRoll</code> (              <code>DiceRoll</code> )          \u2013            <p>The result of the damage roll.</p> </li> </ul>"},{"location":"reference/player_character/#osrlib.player_character.PlayerCharacter.get_initiative_roll","title":"get_initiative_roll","text":"<pre><code>get_initiative_roll() -&gt; int\n</code></pre> <p>Rolls a 1d6, adds the character's Dexterity modifier, and returns the total.</p>"},{"location":"reference/player_character/#osrlib.player_character.PlayerCharacter.grant_xp","title":"grant_xp","text":"<pre><code>grant_xp(xp: int) -&gt; bool\n</code></pre> <p>Grants XP to the character, taking into account their Constitution ability modifier, if any.</p> <p>If the the character's new XP total is enough to level up, the character's level and associated statistics (including a new \"XP neeeded for next level\" value) are increased appropriately.</p>"},{"location":"reference/player_character/#osrlib.player_character.PlayerCharacter.heal","title":"heal","text":"<pre><code>heal(hit_points_healed: int)\n</code></pre> <p>Heal the player character by increasing their hit points by the given amount, up to their maximum hit points.</p> <p>Parameters:</p> <ul> <li> <code>hit_points_healed</code>               (<code>int</code>)           \u2013            <p>The amount of hit points to heal the PC.</p> </li> </ul>"},{"location":"reference/player_character/#osrlib.player_character.PlayerCharacter.roll_abilities","title":"roll_abilities","text":"<pre><code>roll_abilities()\n</code></pre> <p>Rolls the ability scores for the character.</p>"},{"location":"reference/player_character/#osrlib.player_character.PlayerCharacter.roll_hp","title":"roll_hp","text":"<pre><code>roll_hp() -&gt; DiceRoll\n</code></pre> <p>Rolls the character's hit dice and applies their Constitution modifier, if any.</p> <p>The total value of the roll with modifier can be negative after if the roll was low and the character has a negative Constitution modifier. You should clamp the value to 1 before applying it to the character's HP.</p> <p>Returns:</p> <ul> <li> <code>DiceRoll</code> (              <code>DiceRoll</code> )          \u2013            <p>The result of the HP roll. Value with modifiers can be negative.</p> </li> </ul>"},{"location":"reference/player_character/#osrlib.player_character.PlayerCharacter.save_character","title":"save_character","text":"<pre><code>save_character(file_path: str = None) -&gt; str\n</code></pre> <p>Saves the character to a JSON file.</p> <p>Parameters:</p> <ul> <li> <code>file_path</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>The path where the file will be saved.                        If None, saves in the default data directory.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code> (              <code>str</code> )          \u2013            <p>The path where the file was saved.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>OSError</code>             \u2013            <p>If the file cannot be written.</p> </li> </ul>"},{"location":"reference/player_character/#osrlib.player_character.PlayerCharacter.set_character_class","title":"set_character_class","text":"<pre><code>set_character_class(character_class_type: CharacterClassType, level: int = 1)\n</code></pre> <p>Sets the character class of the character.</p>"},{"location":"reference/quest/","title":"quest","text":""},{"location":"reference/quest/#osrlib.quest","title":"quest","text":"<p>The <code>quest</code> module contains the Quest class and associated types.</p> <p>Not yet implemented</p> <p>The <code>quest</code> module and its <code>Quest</code> class have yet to be implemented.</p>"},{"location":"reference/quest/#osrlib.quest.Quest","title":"Quest","text":"<pre><code>Quest()\n</code></pre> <p>Quests have a collection of quest pieces that when obtained by the party mark the quest complete.</p> <p>NOT YET IMPLEMENTED</p>"},{"location":"reference/saving_throws/","title":"saving_throws","text":""},{"location":"reference/saving_throws/#osrlib.saving_throws","title":"saving_throws","text":""},{"location":"reference/saving_throws/#osrlib.saving_throws.get_saving_throws_for_class_and_level","title":"get_saving_throws_for_class_and_level","text":"<pre><code>get_saving_throws_for_class_and_level(character_class: CharacterClassType, level: int)\n</code></pre> <p>Returns the saving throws for a given character class and level.</p>"},{"location":"reference/treasure/","title":"treasure","text":""},{"location":"reference/treasure/#osrlib.treasure","title":"treasure","text":"<p>Implements the treasure generation system inspired by a 1980's version of the world's most popular role-playing game.</p> <p>The system is built around the Treasure class, which encapsulates the logic for generating treasure hauls for the the player's party. Central to <code>Treasure</code> class is the <code>_treasure_types</code> attribute, a detailed mapping of various treasure categories to their respective contents. These categories represent different types of treasure the party might obtain, each with specified probabilities and quantities of items like coins, gems, jewelry, and magical items.</p>"},{"location":"reference/treasure/#osrlib.treasure.Treasure","title":"Treasure","text":"<pre><code>Treasure(treasure_type: TreasureType = TreasureType.NONE)\n</code></pre> <p>Represents a treasure haul within the game, encapsulating various physical item rewards.</p> <p><code>Treasure</code> manages the generation and valuation of treasures comprising coins, gems, jewelry, and magical items. The treasure is generated based on predefined types, each corresponding to different probabilities and amounts of items. The class provides functionalities to generate treasure based on a specified type, calculate its total value in gold pieces (gp), and retrieve the generated items.</p> <p>Attributes:</p> <ul> <li> <code>items</code>               (<code>Dict[Union[CoinType, ItemType], int]</code>)           \u2013            <p>A dictionary holding the treasure items. The keys are instances                                           of either CoinType or ItemType enumerations, and the values are                                           integers representing the quantity of each item.</p> </li> </ul> <p>Example:</p> <pre><code>treasure_haul_01 = Treasure.from_treasure_type(TreasureType.A)\ntreasure_haul_02 = Treasure(TreasureType.B)\n\nprint(f\"Treasure haul 1: {treasure_haul_01}\")\nprint(f\"Treasure haul 2: {treasure_haul_02}\")\n\nxp_from_treasure = treasure_haul_01.total_gp_value + treasure_haul_02.total_gp_value\nprint(f\"Total XP from treasure: {xp_from_treasure}\")\n</code></pre>"},{"location":"reference/treasure/#osrlib.treasure.Treasure.total_gp_value","title":"total_gp_value  <code>property</code>","text":"<pre><code>total_gp_value: int\n</code></pre> <p>Gets the total value in gold pieces (gp) of the treasure.</p> <p>Use this value when calculating the amount of experience points (XP) to award a party who obtains the treasure. For example, at the end of an encounter, quest, or any other event in which the party receives it.</p> <p>Returns:</p> <ul> <li> <code>int</code> (              <code>int</code> )          \u2013            <p>The total value in gold pieces (gp) of the coins, gems, jewelry, and items in the treasure.</p> </li> </ul>"},{"location":"reference/treasure/#osrlib.treasure.Treasure.from_custom_type","title":"from_custom_type  <code>classmethod</code>","text":"<pre><code>from_custom_type(custom_type: Dict[Union[CoinType, ItemType], TreasureDetail]) -&gt; Treasure\n</code></pre> <p>Creates a Treasure instance using a custom-defined treasure type.</p> <p>This method allows for the generation of your own custom sets of treasure not included in the standard treasure types. The custom_type parameter should be a dictionary mapping CoinType or ItemType to TreasureDetail, similar to the predefined treasure types.</p> <p>Parameters:</p> <ul> <li> <code>custom_type</code>               (<code>Dict[Union[CoinType, ItemType], TreasureDetail]</code>)           \u2013            <p>Custom-defined treasure type details.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Treasure</code> (              <code>Treasure</code> )          \u2013            <p>An instance of Treasure whose contents are based on the custom treasure type.</p> </li> </ul> <p>Example:</p> <pre><code># Define a custom treasure type with a 50% chance of 2d6 gold pieces,\n# 40% chance of 1d4 gems/jewelry, and 15% chance of 1 magic item.\ncustom_treasure_type = {\n    CoinType.GOLD: TreasureDetail(chance=50, amount=\"2d6\", magical=False),\n    ItemType.GEMS_JEWELRY: TreasureDetail(chance=40, amount=\"1d4\", magical=False),\n    ItemType.MAGIC_ITEM: TreasureDetail(chance=15, amount=\"1\", magical=True)\n}\n# Create a Treasure instance with the custom treasure type\ncustom_treasure = Treasure.from_custom_type(custom_treasure_type)\n</code></pre>"},{"location":"reference/treasure/#osrlib.treasure.Treasure.from_treasure_type","title":"from_treasure_type  <code>classmethod</code>","text":"<pre><code>from_treasure_type(treasure_type: TreasureType) -&gt; Treasure\n</code></pre> <p>Generate a treasure haul by populating the treasure's contents based the given treasure type.</p> <p>Parameters:</p> <ul> <li> <code>treasure_type</code>               (<code>TreasureType</code>)           \u2013            <p>The type of treasure for which to calculate its contents.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Treasure</code> (              <code>Treasure</code> )          \u2013            <p>The treasure haul.</p> </li> </ul>"},{"location":"reference/treasure/#osrlib.treasure.TreasureDetail","title":"TreasureDetail  <code>dataclass</code>","text":"<pre><code>TreasureDetail(chance: int, amount: str, magical: bool = False)\n</code></pre> <p>Defines the characteristics of a particular \"unit\" of treasure (coins, gems, magic items, ...) in a treasure type.</p> <p>This class dictates the attributes of each item type within a defined treasure type. It outlines the chance of occurrence, the amount (in dice notation or a fixed number), and whether the item is magical. This class is used by the <code>Treasure</code> class, but you can also use it to customize the contents of treasure hauls by creating your own treasure types.</p> <p>Attributes:</p> <ul> <li> <code>chance</code>               (<code>int</code>)           \u2013            <p>The probability (as a percentage) of this item appearing in the treasure.</p> </li> <li> <code>amount</code>               (<code>str</code>)           \u2013            <p>The quantity of the item, expressed in dice notation (e.g., \"1d6\") or as a fixed number.</p> </li> <li> <code>magical</code>               (<code>bool</code>)           \u2013            <p>True if the item is magical, False otherwise (defaults to False).</p> </li> </ul> <p>Example:</p> <pre><code># Defining a custom treasure detail for a new treasure type\ncustom_treasure_detail = TreasureDetail(chance=40, amount=\"3d4\")\ncustom_treasure_type = {\n    CoinType.GOLD: custom_treasure_detail,\n    ItemType.MAGIC_ITEM: TreasureDetail(chance=25, amount=\"1\", magical=True)\n}\ncustom_treasure = Treasure.from_custom_type(custom_treasure_type)\n# This creates a Treasure instance with the custom-defined treasure type\n</code></pre>"},{"location":"reference/utils/","title":"utils","text":""},{"location":"reference/utils/#osrlib.utils","title":"utils","text":"<p>Utility functions and globals for logging and working with strings, paths, and other common tasks.</p> <p>To enable debug logging, set the environment variable <code>OSR_DEBUG</code> to <code>true</code>. Otherwise, logging is set to INFO level.</p>"},{"location":"reference/utils/#osrlib.utils.create_dir_tree_if_not_exist","title":"create_dir_tree_if_not_exist","text":"<pre><code>create_dir_tree_if_not_exist(directory: Path)\n</code></pre> <p>Create the entire directory tree if it does not already exist.</p> <p>This function checks if the specified directory exists, and if not, it creates not only the directory but also any necessary parent directories. It's useful for ensuring that the entire path structure is ready for file operations.</p> <p>Parameters:</p> <ul> <li> <code>directory</code>               (<code>Path</code>)           \u2013            <p>The Path object representing the directory to check and create.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>OSError</code>             \u2013            <p>If the directory cannot be created due to permissions or other file system errors.</p> </li> </ul>"},{"location":"reference/utils/#osrlib.utils.format_modifiers","title":"format_modifiers","text":"<pre><code>format_modifiers(modifiers: dict[ModifierType, int]) -&gt; str\n</code></pre> <p>Get a string representation of the given modifiers.</p> <p>The formatted modifier string returned by this function is a comma-delimited list of the given modifiers. Each modifier includes its name and value. The value string includes its polarity if it's positive or negative.</p> <p>Example:</p> <pre><code>&gt;&gt;&gt; # This should return \"Strength: +1, Dexterity: -1\"\n&gt;&gt;&gt; format_modifiers({ModifierType.STRENGTH: 1, ModifierType.DEXTERITY: -1})\n</code></pre> <p>Parameters:</p> <ul> <li> <code>modifiers</code>               (<code>dict[ModifierType, int]</code>)           \u2013            <p>A dictionary of modifiers to format.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>A comma-delimited string representation of the modifiers.</p> </li> </ul>"},{"location":"reference/utils/#osrlib.utils.get_data_dir_path","title":"get_data_dir_path","text":"<pre><code>get_data_dir_path(app_name: str) -&gt; Path\n</code></pre> <p>Determine the appropriate directory for saving game data based on the operating system.</p> <p>This function dynamically identifies the standard directory for storing application data on different platforms (Windows, macOS, Linux/Unix-like). On Windows, it uses the 'LOCALAPPDATA' environment variable to find the local application data folder. On macOS, it defaults to the 'Library/Application Support' directory within the user's home directory. For Linux and Unix-like systems, it uses the 'XDG_DATA_HOME' environment variable, defaulting to '.local/share' in the user's home directory if the variable is not set.</p> <p>Parameters:</p> <ul> <li> <code>app_name</code>               (<code>str</code>)           \u2013            <p>The name of the application. Used to create a subdirectory within the standard              application data directory.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Path</code> (              <code>Path</code> )          \u2013            <p>An object representing the absolute path to the directory where game save data   should be stored.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>             \u2013            <p>If the operating system is not supported (not Windows, macOS, or Linux/Unix-like).</p> </li> </ul> Example <p>game_save_dir = get_save_game_directory(\"YourAppName\") print(game_save_dir) /home/username/.local/share/YourAppName  # On Linux C:\\Users\\username\\AppData\\Local\\YourAppName  # On Windows /Users/username/Library/Application Support/YourAppName  # On macOS</p>"},{"location":"reference/utils/#osrlib.utils.sanitize_path_element","title":"sanitize_path_element","text":"<pre><code>sanitize_path_element(path_element: str, replace_space: str = '_') -&gt; str\n</code></pre> <p>Sanitize a string to ensure it's a valid path element for file and directory names.</p> <p>This function removes or replaces characters that are not allowed in file and directory names on various operating systems. Use this function to sanitize any part of a file path.</p> <p>Parameters:</p> <ul> <li> <code>path_element</code>               (<code>str</code>)           \u2013            <p>The path element (e.g., file name, directory name) to sanitize.</p> </li> <li> <code>replace_space</code>               (<code>str</code>, default:                   <code>'_'</code> )           \u2013            <p>The character to replace spaces with. Defaults to '_'.                            Set to None to remove spaces instead.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code> (              <code>str</code> )          \u2013            <p>The sanitized path element.</p> </li> </ul> Example <p>sanitized_name = sanitize_path_element(\"Invalid/Name*&lt;&gt;?\") print(sanitized_name) InvalidName</p>"},{"location":"reference/utils/#osrlib.utils.wrap_text","title":"wrap_text","text":"<pre><code>wrap_text(text: str, width: int = 100) -&gt; str\n</code></pre> <p>Wrap a given string of text to a specified width.</p> <p>This function utilizes the <code>textwrap</code> module to break a long string of text into lines of a given width. It's particularly useful for formatting long strings into a more readable form, especially in user interfaces where space is limited.</p> <p>Parameters:</p> <ul> <li> <code>text</code>               (<code>str</code>)           \u2013            <p>The text string to be wrapped.</p> </li> <li> <code>width</code>               (<code>int</code>, default:                   <code>100</code> )           \u2013            <p>The maximum width of the wrapped lines. Defaults to 100 characters.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code> (              <code>str</code> )          \u2013            <p>A new string with the original text wrapped to the specified width.</p> </li> </ul> Example <p>sample_text = \"This is a long text string that needs to be wrapped for better readability.\" print(wrap_text(sample_text, 40)) This is a long text string that needs to be wrapped for better readability.</p>"}]}